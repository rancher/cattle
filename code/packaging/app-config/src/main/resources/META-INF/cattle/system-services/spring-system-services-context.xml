
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:extension="http://cattle.io/schemas/spring/extension"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://cattle.io/schemas/spring/extension http://cattle.io/schemas/spring/extension-1.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <bean class="io.cattle.platform.agent.instance.dao.impl.AgentInstanceDaoImpl" />
    <bean id="AgentInstanceFactory" class="io.cattle.platform.agent.instance.factory.impl.AgentInstanceFactoryImpl" />
    <bean class="io.cattle.platform.agent.instance.serialization.AgentInstanceAuthObjectPostProcessor" />
    <bean class="io.cattle.platform.agent.instance.service.impl.AgentInstanceManagerImpl" >
        <property name="nicLookups" value="#{extensionManager.list('instance.nic.lookup')}" />
    </bean>

    <bean class="io.cattle.platform.agent.instance.service.impl.InstanceHostMapNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.InstanceLinkNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.HostIpAddressMapNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.PortNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.IpAddressNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.IpAssociationNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.ServiceExposeMapCreateNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.ServiceConsumeMapCreateNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.ServiceNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.HostCreateRemoveNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.HealthcheckInstanceHostMapNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.NicPerVnetNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.ContainerNicLookup" />
    <bean class="io.cattle.platform.agent.instance.service.impl.AccountRenameNicLookup" />

    <bean id="AgentInstanceTypes" class="io.cattle.platform.object.meta.TypeSet" >
        <property name="typeNames">
            <list>
                <value>agentInstanceProvider,parent=networkServiceProvider</value>
                <value>dhcpService,parent=networkService</value>
                <value>ipsecTunnelService,parent=networkService</value>
                <value>linkService,parent=networkService</value>
                <value>portService,parent=networkService</value>
                <value>metadataService,parent=networkService</value>
                <value>gatewayService,parent=networkService</value>
                <value>hostNatGatewayService,parent=networkService</value>
            </list>
        </property>
    </bean>

    <bean class="io.cattle.platform.agent.instance.process.AgentInstanceInstanceCreate" />
    <bean class="io.cattle.platform.agent.instance.process.AgentInstanceInstanceStart" />
    <bean class="io.cattle.platform.agent.instance.process.AgentInstanceInstanceRemove" />
    <bean class="io.cattle.platform.agent.instance.process.AgentInstanceNicActivate" />
    <bean class="io.cattle.platform.agent.instance.process.AgentInstancePostNicActivate" />
    <bean class="io.cattle.platform.agent.instance.process.AgentInstancePreInstanceHostMapActivate" />
    <bean class="io.cattle.platform.agent.instance.process.AgentInstanceApplyItems" />
    <bean class="io.cattle.platform.agent.instance.process.AgentInstanceHostServicesApplyItems" />

    <tx:advice id="AgentInstanceDaoAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="createInstanceForProvider" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="AgentInstanceDaoAdvice" pointcut="execution(* io.cattle.platform.agent.instance.dao.AgentInstanceDao.*(..))" />
    </aop:config>

    <extension:discover class="io.cattle.platform.agent.instance.service.InstanceNicLookup" />

    <bean class="io.cattle.platform.agent.instance.link.process.AgentInstanceLinkActivate" />
    <bean class="io.cattle.platform.agent.instance.ipsec.process.AgentInstanceIpsecNetworkServiceCreate" />
    <bean class="io.cattle.platform.agent.instance.ipsec.process.AgentInstanceIpsecNicActivate" />
    <bean class="io.cattle.platform.agent.instance.ipsec.process.AgentInstanceIpsecNicDeactivate" />

    <bean id="AgentLocator" class="io.cattle.platform.agent.impl.AgentLocatorImpl" />

    <bean id="DefaultIdFormatter" class="io.cattle.platform.api.formatter.DefaultIdFormatter" >
        <property name="schemaFactory" ref="CoreSchemaFactory" />
        <property name="plainTypes">
            <set>
                <value>typeDocumentation</value>
                <value>scripts</value>
            </set>
        </property>
    </bean>

    <extension:discover class="io.github.ibuildthecloud.gdapi.id.IdFormatter" />

    <task:scheduled-tasks scheduler="CoreTaskScheduler">
        <task:scheduled ref="RetryTimeoutService" method="retry" fixed-delay="1000" />
    </task:scheduled-tasks>

    <bean id="RetryTimeoutService" class="io.cattle.platform.async.retry.impl.RetryTimeoutServiceImpl" >
        <property name="executorService" ref="ReplyExecutorService" />
    </bean>

       <bean class="io.cattle.platform.framework.encryption.impl.Sha256Hasher" />
       <bean class="io.cattle.platform.framework.encryption.impl.Aes256Encrypter" />

       <extension:discover class="io.github.ibuildthecloud.gdapi.model.Transformer" />

       <bean id="transformationService" class="io.cattle.platform.framework.encryption.handler.impl.TransformationServiceImpl">
              <property name="transformers" value="#{extensionManager.map('transformer')}" />
       </bean>

       <bean class="io.cattle.platform.framework.encryption.EncryptionUtils" />

    <bean class="io.cattle.platform.configitem.version.impl.ConfigUpdatePublisher" />
    <bean class="io.cattle.platform.configitem.version.impl.ConfigItemStatusManagerImpl" />
    <bean class="io.cattle.platform.configitem.version.dao.impl.ConfigItemStatusDaoImpl" />


    <bean class="io.cattle.platform.core.dao.impl.AccountDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.AgentDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.CertificateDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.DataDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.DynamicSchemaDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.GenericMapDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.GenericResourceDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.InstanceDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.IpAddressDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.NicDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.NetworkDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.StoragePoolDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.VnetDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.LabelsDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.HostDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.VolumeDaoImpl" />
    <bean class="io.cattle.platform.core.dao.impl.ServiceDaoImpl" />

    <tx:advice id="GenericResourceDaoImplAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="createAndSchedule" />
            <tx:method name="updateAndSchedule" />
        </tx:attributes>
    </tx:advice>

    <tx:advice id="IpAddressDaoImplAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="mapNewIpAddress" />
            <tx:method name="assignNewAddress" />
            <tx:method name="assignAndActivateNewAddress" />
            <tx:method name="updateIpAddress" />
        </tx:attributes>
    </tx:advice>

    <tx:advice id="StoragePoolDaoImplAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="mapNewPool" />
            <tx:method name="createStoragePoolHostMap" />
        </tx:attributes>
    </tx:advice>

    <tx:advice id="VolumeDaoImplAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="createVolumeInStoragePool" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="GenericResourceDaoImplAdvice"
            pointcut="execution(* io.cattle.platform.core.dao.GenericResourceDao.*(..))" />
        <aop:advisor advice-ref="IpAddressDaoImplAdvice"
            pointcut="execution(* io.cattle.platform.core.dao.IpAddressDao.*(..))" />
        <aop:advisor advice-ref="StoragePoolDaoImplAdvice"
            pointcut="execution(* io.cattle.platform.core.dao.StoragePoolDao.*(..))" />
        <aop:advisor advice-ref="VolumeDaoImplAdvice"
            pointcut="execution(* io.cattle.platform.core.dao.VolumeDao.*(..))" />
    </aop:config>

    <bean class="io.cattle.platform.core.cleanup.TableCleanUp"/>
    <bean class="io.cattle.platform.core.cleanup.TableCleanUpCaller"/>


    <bean class="io.cattle.platform.docker.transform.DockerTransformerImpl" />
    
    
    <bean class="io.cattle.platform.docker.storage.DockerImageCredentialLookup" />
    <bean class="io.cattle.platform.docker.storage.DockerStoragePoolDriver" />
    <bean class="io.cattle.platform.docker.storage.process.DockerStoragePoolCreate" />
    <bean class="io.cattle.platform.docker.storage.process.PullTaskCreate" >
        <property name="imageCredentialLookups" value="#{extensionManager.list('image.credential.lookup')}" />
    </bean>
    <bean class="io.cattle.platform.docker.storage.dao.impl.DockerStorageDaoImpl" >
        <property name="imageCredentialLookups" value="#{extensionManager.list('image.credential.lookup')}" />
    </bean>

    <tx:advice id="DockerStorageAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="createExternalStoragePool" />
            <tx:method name="createImageForInstance" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="DockerStorageAdvice" pointcut="execution(* io.cattle.platform.docker.storage.dao.DockerStorageDao.*(..))" />
    </aop:config>

    <extension:discover class="io.cattle.platform.storage.ImageCredentialLookup" />


    <bean id="EventService" class="io.cattle.platform.eventing.memory.InMemoryEventService" >
        <property name="executorService" ref="CoreExecutorService" />
        <property name="namedExecutorServiceList" value="#{extensionManager.list('named.executor.service')}" />
    </bean>

    <bean class="io.cattle.platform.eventing.annotation.AnnotatedListenerRegistration" >
        <property name="listeners" value="#{extensionManager.list('annotated.event.listener')}"></property>
    </bean>

    <extension:discover class="io.cattle.platform.eventing.annotation.AnnotatedEventListener" />


    <bean class="io.cattle.platform.extension.dynamic.impl.ExternalDynamicExtensionHandlerImpl" />
    <bean class="io.cattle.platform.extension.dynamic.dao.impl.ExternalHandlerDaoImpl" />

    <extension:discover class="io.cattle.platform.extension.dynamic.DynamicExtensionHandler" />


    <bean class="io.cattle.platform.ha.monitor.dao.impl.PingInstancesMonitorDaoImpl" />
    <bean class="io.cattle.platform.ha.monitor.impl.PingInstancesMonitorImpl" />

    <bean class="io.cattle.iaas.healthcheck.service.impl.HealthcheckServiceImpl" />
    <bean class="io.cattle.iaas.healthcheck.process.InstanceHealthcheckRegister" />
    <bean class="io.cattle.iaas.healthcheck.process.InstanceRemovePostHandler" />
    <bean class="io.cattle.iaas.healthcheck.process.ServiceEventPreCreate" />
    <bean class="io.cattle.iaas.healthcheck.process.ServiceEventCreate" />
    <bean class="io.cattle.iaas.healthcheck.process.HealthCheckReconcileTrigger" />
    <bean class="io.cattle.iaas.healthcheck.process.HealthCheckReconcilePostTrigger" />
    <bean class="io.cattle.iaas.healthcheck.process.InstanceHealthCheckUpdate" />
    <bean class="io.cattle.iaas.healthcheck.process.HealthCheckReconcile" />

	<bean class="io.cattle.iaas.healthcheck.service.impl.AgentHealthcheckHostLookup" />
	<bean class="io.cattle.iaas.healthcheck.service.impl.HostHealthcheckHostLookup" />
	<bean class="io.cattle.iaas.healthcheck.service.impl.ProviderInstanceMapHealthcheckHostLookup" />

	<bean class="io.cattle.iaas.healthcheck.service.impl.AgentHealthcheckInstancesLookup" />
	<bean class="io.cattle.iaas.healthcheck.service.impl.HostMapHealthcheckInstancesLookup" />
	<bean class="io.cattle.iaas.healthcheck.service.impl.ProviderInstanceMapHealthcheckInstancesLookup" />
	
	<bean class="io.cattle.iaas.healthcheck.service.impl.HealthcheckCleanupMonitorImpl" />

    <bean class="io.cattle.platform.host.service.impl.HostApiServiceImpl" />
    <bean class="io.cattle.platform.token.impl.JwtTokenServiceImpl" />
    <bean class="io.cattle.platform.host.service.HostApiRSAKeyProvider" />

    <bean id="HostOnlyTypeSet" class="io.cattle.platform.object.meta.TypeSet" >
        <property name="typeNames">
            <set>
                <value>hostOnlyNetwork,parent=network</value>
            </set>
        </property>
    </bean>

    <bean class="io.cattle.platform.jmx.JmxPublisherFactory" >
        <property name="resources" ref="JmxTransConfig" />
    </bean>

    <bean id="JmxTransConfig" class="io.cattle.platform.spring.resource.SpringUrlListFactory" >
        <property name="resources">
            <list>
                <value>classpath:jmxtrans.json</value>
                <value>classpath*:jmxtrans/*.json</value>
                <value>classpath:org/jmxtrans/embedded/config/jmxtrans-internals.json</value>
                <value>classpath:org/jmxtrans/embedded/config/jvm-sun-hotspot.json</value>
            </list>
        </property>
    </bean>

    <bean class="io.cattle.iaas.labels.service.impl.LabelsServiceImpl" />
    <bean class="io.cattle.iaas.labels.api.SetContainerLabelsActionHandler" />

    <bean class="io.cattle.platform.metadata.service.impl.MetadataServiceImpl" />
    <bean class="io.cattle.platform.metadata.dao.impl.MetadataDaoImpl" />
    <bean class="io.cattle.platform.metadata.serializer.MetadataInstanceSerializer" />

    <bean id="DefaultObjectMetaDataManager" class="io.cattle.platform.object.meta.impl.DefaultObjectMetaDataManager" >
        <property name="typeSets" value="#{extensionManager.list('type.set')}" />
        <property name="processDefinitions" value="#{extensionManager.list('process.definition')}" />
    </bean>

    <bean class="io.cattle.platform.object.impl.DefaultObjectManager" >
        <property name="postInitHandlers" value="#{extensionManager.list('object.post.instantiation.handler')}" />
        <property name="lifeCycleHandlers" value="#{extensionManager.list('object.life.cycle.handler')}" />
        <property name="lockingConfiguration" ref="LockingJooqConfiguration" />
    </bean>

    <bean class="io.cattle.platform.object.postinit.SpecialFieldsPostInstantiationHandler" />
    <bean class="io.cattle.platform.object.postinit.ObjectDefaultsPostInstantiationHandler" >
        <property name="defaultProviders">
            <list>
                <bean class="io.cattle.platform.object.defaults.JsonDefaultsProvider" >
                    <property name="defaultPath" value="schema/defaults" />
                    <property name="defaultOverridePath" value="schema/defaults/overrides" />
                </bean>
            </list>
        </property>
    </bean>
    <bean class="io.cattle.platform.object.postinit.ObjectDataPostInstantiationHandler" />
    <bean class="io.cattle.platform.object.postinit.SetPropertiesPostInstantiationHandler" />
    <bean class="io.cattle.platform.object.postinit.UUIDPostInstantiationHandler" />

    <bean class="io.cattle.platform.object.serialization.impl.DefaultObjectSerializerFactoryImpl" >
        <property name="postProcessors" value="#{extensionManager.list('object.type.serializer.post.processor')}" />
    </bean>

    <bean class="io.cattle.platform.object.util.CommonsConverterStartup" />

    <bean class="io.cattle.platform.object.impl.TransactionDelegateImpl" />

    <extension:discover class="io.cattle.platform.object.meta.TypeSet" />
    <extension:discover class="io.cattle.platform.object.postinit.ObjectPostInstantiationHandler" />
    <extension:discover class="io.cattle.platform.object.lifecycle.ObjectLifeCycleHandler" />
    <extension:discover class="io.cattle.platform.object.serialization.ObjectTypeSerializerPostProcessor" />

    <tx:advice id="TransactionDelegateAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="doInTransaction" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="TransactionDelegateAdvice" pointcut="execution(* io.cattle.platform.object.impl.TransactionDelegate.*(..))" />
    </aop:config>

    <bean id="PurgeMonitorImpl" class="io.cattle.platform.object.purge.impl.PurgeMonitorImpl" />
    <bean id="RemoveMonitorImpl" class="io.cattle.platform.object.purge.impl.RemoveMonitorImpl" />

    <bean class="io.cattle.platform.engine.server.impl.ProcessReplayTask" />
    <bean class="io.cattle.platform.engine.eventing.impl.ProcessEventListenerImpl" />

    <bean id="ProcessRecordDao" class="io.cattle.platform.engine.manager.impl.jooq.JooqProcessRecordDao" />

    <bean id="ProcessServerImpl" class="io.cattle.platform.engine.server.impl.ProcessServerImpl" >
        <property name="dispatcher" >
            <bean class="io.cattle.platform.engine.server.impl.ProcessInstanceParallelDispatcher" />
        </property>
    </bean>

    <bean class="io.cattle.platform.engine.manager.impl.DefaultProcessManager" >
        <property name="definitionList" value="#{extensionManager.list('process.definition')}" />
        <property name="exceptionHandler">
            <bean class="io.cattle.platform.object.process.impl.ObjectExecutionExceptionHandler" />
        </property>
        <property name="changeMonitors" value="#{extensionManager.list('state.change.monitor')}" />
    </bean>

    <bean class="io.cattle.platform.engine.server.impl.EventingDispatcher" />

    <bean class="io.cattle.platform.object.process.impl.DefaultObjectProcessManager" />
    <bean class="io.cattle.platform.process.monitor.EventNotificationChangeMonitor" />

    <bean class="io.cattle.platform.extension.spring.ProcessExtensionDiscovery" >
        <property name="typeClass" value="io.cattle.platform.engine.handler.ProcessHandler" />
    </bean>

    <bean class="io.cattle.platform.extension.spring.ProcessExtensionDiscovery" >
        <property name="typeClass" value="io.cattle.platform.engine.handler.ProcessPreListener" />
    </bean>

    <bean class="io.cattle.platform.extension.spring.ProcessExtensionDiscovery" >
        <property name="typeClass" value="io.cattle.platform.engine.handler.ProcessPostListener" />
    </bean>

    <extension:discover class="io.cattle.platform.engine.process.StateChangeMonitor" />


    <bean class="io.cattle.platform.register.process.RegisterCreate" />
    <bean class="io.cattle.platform.register.process.RegisterTokenCreate" />
    <bean class="io.cattle.platform.register.process.RegisterTokenAccountCreate" />
    <bean class="io.cattle.platform.register.process.RegisterTokenAgentRemove" />

    <bean class="io.cattle.platform.register.dao.impl.RegisterDaoImpl" />

    <tx:advice id="RegisterAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="createAgentForRegistration" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="RegisterAdvice" pointcut="execution(* io.cattle.platform.register.dao.RegisterDao.*(..))" />
    </aop:config>


    <bean id="RegisterTypeSet" class="io.cattle.platform.object.meta.TypeSet" >
        <property name="typeNames">
            <set>
                <value>register,parent=genericObject</value>
                <value>registrationToken,parent=credential</value>
            </set>
        </property>
    </bean>

    <bean class="io.cattle.platform.object.monitor.impl.ResourceMonitorImpl" />

    <bean class="io.cattle.platform.resource.pool.impl.ResourcePoolManagerImpl" >
        <property name="factories" value="#{extensionManager.list('pooled.resource.item.generator.factory')}" />
    </bean>

    <extension:discover class="io.cattle.platform.resource.pool.PooledResourceItemGeneratorFactory" />

    <bean class="io.cattle.platform.resource.pool.subnet.SubnetAddressGeneratorFactory" />
    <bean class="io.cattle.platform.resource.pool.mac.MacAddressPrefixGeneratorFactory" />
    <bean class="io.cattle.platform.resource.pool.mac.MacAddressGeneratorFactory" />
    <bean class="io.cattle.platform.resource.pool.port.HostPortGeneratorFactory" />
    <bean class="io.cattle.platform.resource.pool.port.EnvironmentPortGeneratorFactory" />

    <bean class="io.cattle.platform.sample.data.SampleDataStartupV3" />
    <bean class="io.cattle.platform.sample.data.SampleDataStartupV4" />
    <bean class="io.cattle.platform.sample.data.SampleDataStartupV6" />
    <bean class="io.cattle.platform.sample.data.SampleDataStartupV5" />
    <bean class="io.cattle.platform.sample.data.SampleDataStartupV7" />
    <bean class="io.cattle.platform.sample.data.SampleDataStartupV8" />
    <bean class="io.cattle.platform.sample.data.SampleDataStartupV9" />
        
    <!-- We are not using this at the moment, we will just disable
    <bean class="io.cattle.platform.servicediscovery.process.ServiceAgentDelegateHandler" />
    -->

    <bean class="io.cattle.platform.servicediscovery.process.ServiceUpdateActivate" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceDeactivate" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceRemove" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceCreate" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceUpgrade" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceRollback" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceFinishUpgrade" />
    <bean class="io.cattle.platform.servicediscovery.process.NetworkFromInstanceStop" />
    <bean class="io.cattle.platform.servicediscovery.process.SelectorServiceCreatePostListener" />
    <bean class="io.cattle.platform.servicediscovery.process.SelectorInstancePostListener" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceExposeMapCreate" />
    <bean class="io.cattle.platform.servicediscovery.process.PortActivateDeactivatePostListener" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceRestart" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceSuffixRemove" />
    <bean class="io.cattle.platform.servicediscovery.process.HostIpUpdatePostListener" />
    <bean class="io.cattle.platform.servicediscovery.process.HostRemovePostListener" />
    <bean class="io.cattle.platform.servicediscovery.process.InstancePurgePostListener" />

    <bean class="io.cattle.platform.servicediscovery.process.EnvironmentRemove" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceDiscoveryInstanceRemovePreListener" />
    <bean class="io.cattle.platform.servicediscovery.process.ServicesReconcilePostTrigger" />
    <bean class="io.cattle.platform.servicediscovery.process.ServicesReconcileTrigger" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceLinkActivateHandler" />
    <bean class="io.cattle.platform.servicediscovery.process.ServiceLinkPreInstanceStateHandler" />
    <bean class="io.cattle.platform.servicediscovery.process.LoadBalancerServiceUpdateConfig" />
    <bean class="io.cattle.platform.servicediscovery.process.LoadBalancerInstanceStart" />
    <bean class="io.cattle.platform.servicediscovery.process.StackHealthStateUpdate" />
    <bean class="io.cattle.platform.servicediscovery.process.StackHealthStateUpdateTrigger" />

    <bean class="io.cattle.platform.servicediscovery.dao.impl.ServiceConsumeMapDaoImpl" />
    <bean class="io.cattle.platform.servicediscovery.dao.impl.ServiceExposeMapDaoImpl">
    	<property name="lockingConfiguration" ref="LockingJooqConfiguration" />
    </bean>

    <bean class="io.cattle.platform.servicediscovery.dao.impl.ServiceDaoImpl" />

    <bean class="io.cattle.platform.servicediscovery.service.impl.ServiceDiscoveryServiceImpl" />
    <bean class="io.cattle.platform.servicediscovery.service.impl.GlobalHostActivateServiceLookup" />
    <bean class="io.cattle.platform.servicediscovery.service.impl.HostServiceLookup" />
    <bean class="io.cattle.platform.servicediscovery.service.impl.InstanceServiceLookup" />
    <bean class="io.cattle.platform.servicediscovery.service.impl.AgentServiceLookup" />
    
    <bean class="io.cattle.platform.servicediscovery.service.lbservice.impl.InstanceChangeLoadBalancerServiceLookup" />
    <bean class="io.cattle.platform.servicediscovery.service.lbservice.impl.LinkChangeLoadBalancerServiceLookup" />
    <bean class="io.cattle.platform.servicediscovery.service.lbservice.impl.ServiceChangeLoadBalancerServiceLookup" />
    <bean class="io.cattle.platform.servicediscovery.service.lbservice.impl.ServiceExposeMapChangeLoadBalancerServiceLookup" />
    <bean class="io.cattle.platform.servicediscovery.service.lbservice.impl.CertificateUpdateLoadBalancerServiceLookup" />
    
    <bean class="io.cattle.platform.servicediscovery.deployment.impl.DeploymentManagerImpl" />
    <bean class="io.cattle.platform.servicediscovery.deployment.impl.unit.DeploymentUnitInstanceFactoryImpl" />
    <bean class="io.cattle.platform.servicediscovery.deployment.impl.planner.ServiceDeploymentPlannerFactoryImpl" />
    <bean class="io.cattle.platform.servicediscovery.upgrade.impl.UpgradeManagerImpl" />
    
    <bean class="io.cattle.platform.allocator.service.AllocatorServiceImpl" />
      
    <bean class="io.cattle.platform.process.progress.ProcessProgressImpl" />
    <bean class="io.cattle.platform.allocator.dao.impl.AllocatorDaoImpl" />
    
    <bean class="io.cattle.platform.iaas.api.auditing.AuditServiceImpl" />
    <bean class="io.cattle.platform.iaas.api.auditing.dao.impl.AuditLogDaoImpl" />
    <bean class="io.github.ibuildthecloud.gdapi.json.JacksonMapper" />

    <tx:advice id="ServiceMapDaoImplAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="createServiceInstance" />
            <tx:method name="createServiceLink" />
            <tx:method name="createServiceLinks" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="ServiceMapDaoImplAdvice" pointcut="execution(* io.cattle.platform.servicediscovery.api.dao.ServiceExposeMapDao.*(..))" />
        <aop:advisor advice-ref="ServiceMapDaoImplAdvice" pointcut="execution(* io.cattle.platform.servicediscovery.api.dao.ServiceConsumeMapDao.*(..))" />
    </aop:config>
    

    <bean class="io.cattle.platform.storage.service.impl.StorageServiceImpl" >
        <property name="drivers" value="#{extensionManager.list('storage.pool.driver')}" />
    </bean>

    <bean class="io.cattle.platform.storage.service.dao.impl.ImageDaoImpl" />

    <tx:advice id="ImageDaoAdvice" transaction-manager="CoreTransactionManager">
        <tx:attributes>
            <tx:method name="persistAndAssociateImage" propagation="REQUIRES_NEW" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="ImageDaoAdvice" pointcut="execution(* io.cattle.platform.storage.service.dao.ImageDao.*(..))" />
    </aop:config>

    <extension:discover class="io.cattle.platform.storage.pool.StoragePoolDriver" />


    <bean class="io.cattle.platform.lock.impl.LockManagerImpl" >
        <property name="lockProvider" ref="LockProvider" />
    </bean>

    <bean id="LockProvider" class="io.cattle.platform.lock.provider.impl.InMemoryLockProvider" />
    
    <bean class="io.cattle.platform.lock.impl.LockDelegatorImpl" >
        <property name="executorService" ref="CoreExecutorService" />
    </bean>

    <bean class="io.cattle.platform.systemstack.process.SystemStackTrigger" />
    <bean class="io.cattle.platform.systemstack.listener.SystemStackUpdate" />


    <bean class="io.cattle.platform.task.impl.TaskManagerImpl" >
        <property name="tasks" value="#{extensionManager.list('task')}" />
    </bean>
    <bean class="io.cattle.platform.task.eventing.impl.TaskManagerEventListenerImpl" />
    <bean class="io.cattle.platform.task.dao.impl.TaskDaoImpl" />
    <bean class="io.cattle.platform.task.cleanup.CleanupTaskInstances" />

    <extension:discover class="io.cattle.platform.task.Task" />
    <bean class="io.cattle.platform.storage.simulator.pool.SimulatorStoragePoolDriver" />
    <bean class="io.cattle.platform.storage.simulator.process.SimulatorPoolCreate" />

    <bean class="io.cattle.platform.docker.process.dao.impl.ComposeDaoImpl" />
    <bean class="io.cattle.platform.docker.service.impl.ComposeManagerImpl" />

    <bean class="io.cattle.platform.service.launcher.ServiceAccountCreateStartup" />

</beans>
