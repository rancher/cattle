<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:extension="http://cattle.io/schemas/spring/extension"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://cattle.io/schemas/spring/extension http://cattle.io/schemas/spring/extension-1.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <bean id="ConfigItemApiTypes" class="io.cattle.platform.object.meta.TypeSet" >
        <property name="typeClasses">
            <list>
                <value>io.cattle.platform.configitem.api.model.ConfigContent</value>
            </list>
        </property>
    </bean>

    <bean class="io.cattle.platform.configitem.api.manager.ConfigContentManager" />

    <bean id="ApiPubSubTypeSet" class="io.cattle.platform.object.meta.TypeSet" >
        <property name="typeClasses">
            <list>
                <value>io.cattle.platform.api.pubsub.model.Subscribe</value>
                <value>io.cattle.platform.api.pubsub.model.Publish</value>
            </list>
        </property>
    </bean>

    <bean class="io.cattle.platform.api.pubsub.manager.SubscribeManager" >
        <property name="handlers" value="#{extensionManager.list('subscription.handler')}" />
    </bean>
    <bean class="io.cattle.platform.api.pubsub.manager.PublishManager" />

    <extension:discover class="io.cattle.platform.api.pubsub.subscribe.SubscriptionHandler" />

    <bean class="io.cattle.platform.api.pubsub.subscribe.BlockingSubscriptionHandler" >
        <property name="executorService" ref="CoreExecutorService" />
        <property name="eventProcessors" value="#{extensionManager.list('api.pub.sub.event.post.processor')}" />
    </bean>

    <bean id="ServletAsyncSubscriptionHandler" class="io.cattle.platform.api.pubsub.manager.impl.ClassAvailableSubscriptionHandler" >
        <property name="executorService" ref="CoreExecutorService" />
        <property name="testClass" value="javax.servlet.AsyncContext" />
        <property name="className" value="io.cattle.platform.api.pubsub.subscribe.ServletAsyncSubscriptionHandler" />
        <property name="priority">
            <util:constant static-field="io.cattle.platform.util.type.Priority.DEFAULT_OVERRIDE" />
        </property>
        <property name="eventProcessors" value="#{extensionManager.list('api.pub.sub.event.post.processor')}" />
    </bean>

    <bean id="JettyWebSocketSubcriptionHandler" class="io.cattle.platform.api.pubsub.manager.impl.ClassAvailableSubscriptionHandler" >
        <property name="executorService" ref="CoreExecutorService" />
        <property name="testClass" value="org.eclipse.jetty.websocket.server.WebSocketServerFactory" />
        <property name="className" value="io.cattle.platform.api.pubsub.subscribe.jetty.JettyWebSocketSubcriptionHandler" />
        <property name="priority">
            <util:constant static-field="io.cattle.platform.util.type.Priority.SPECIFIC" />
        </property>
        <property name="eventProcessors" value="#{extensionManager.list('api.pub.sub.event.post.processor')}" />
    </bean>

    <bean id="Versions" class="io.github.ibuildthecloud.gdapi.version.Versions" >
        <property name="versions">
            <list>
                <value type="java.lang.String">v1</value>
            </list>
        </property>
        <property name="latest" value="v1" />
    </bean>

    <bean class="io.github.ibuildthecloud.gdapi.servlet.ApiRequestFilterDelegate" >
        <property name="schemaFactory" ref="CoreSchemaFactory" />
        <property name="handlers" value="#{extensionManager.list('api.request.handler')}" />
        <property name="version">
            <bean factory-bean="Versions" factory-method="getLatest" />
        </property>
        <property name="idFormatter" value="#{extensionManager.first('id.formatter', 'io.github.ibuildthecloud.gdapi.id.IdFormatter')}" />
    </bean>

    <bean class="io.cattle.platform.api.resource.ExtensionResourceManagerLocator" >
        <property name="schemaFactory" ref="CoreSchemaFactory" />
        <property name="defaultResourceManager" ref="DefaultResourceManager" />
        <property name="resourceManagers" value="#{extensionManager.list('resource.manager')}" />
        <property name="resourceManagerFilters" value="#{extensionManager.list('resource.manager.filter')}" />
    </bean>

    <bean id="DefaultResourceManager" class="io.cattle.platform.api.resource.jooq.DefaultJooqResourceManager" />

    <bean class="io.cattle.platform.api.html.ConfigBasedHtmlTemplate" >
        <property name="settings">
            <bean class="io.cattle.platform.api.utils.ApiSettings" />
        </property>
    </bean>

    <bean class="io.cattle.platform.api.parser.ApiRequestParser" />
    <bean class="io.github.ibuildthecloud.gdapi.json.JacksonMapper" />

    <!-- This is here only to ensure that there are two SchemaFactories in the context
         to make autowiring fail -->
    <bean class="io.github.ibuildthecloud.gdapi.factory.impl.SubSchemaFactory" >
        <property name="schemaFactory" ref="CoreSchemaFactory" />
        <property name="id" value="noop" />
    </bean>

    <bean class="io.github.ibuildthecloud.gdapi.response.impl.ResourceOutputFilterManagerImpl" >
        <property name="baseSchemaFactory" ref="CoreSchemaFactory" />
        <property name="outputFilters" value="#{extensionManager.list('resource.output.filter')}" />
    </bean>

    <extension:discover class="io.github.ibuildthecloud.gdapi.response.ResourceOutputFilter" />
    <extension:discover class="io.github.ibuildthecloud.gdapi.request.handler.ApiRequestHandler" />
    <extension:discover class="io.github.ibuildthecloud.gdapi.request.resource.ResourceManagerFilter" />
    <extension:discover class="io.github.ibuildthecloud.gdapi.request.resource.ResourceManager" />
    <extension:discover class="io.cattle.platform.api.action.ActionHandler" />
    <extension:discover class="io.cattle.platform.api.link.LinkHandler" />

    <bean class="io.cattle.platform.framework.encryption.request.handler.TransformationHandler" />

    <bean class="io.cattle.platform.configitem.context.dao.impl.NetworkInfoDaoImpl" />
    <bean class="io.cattle.platform.configitem.context.dao.impl.DnsInfoDaoImpl" />
    <bean class="io.cattle.platform.configitem.context.dao.impl.MetaDataInfoDaoImpl" />
    <bean class="io.cattle.platform.configitem.context.dao.impl.LoadBalancerInfoDaoImpl" />

    <bean class="io.cattle.platform.configitem.server.impl.ConfigItemServerImpl" />
    <bean class="io.cattle.platform.configitem.registry.impl.ConfigItemRegistryImpl" >
        <property name="factories" value="#{extensionManager.list('config.item.factory')}" />
    </bean>

    <extension:discover class="io.cattle.platform.configitem.server.model.ConfigItemFactory" />
    <extension:discover class="io.cattle.platform.configitem.context.ConfigItemContextFactory" />

    <bean class="io.cattle.platform.configitem.server.model.impl.GenericConfigItemFactory" >
        <property name="root" value="config-content" />
        <property name="devRelativePath" value="../../../content/config-content" />
        <property name="name" value="CommonConfigItems" />
        <property name="resources" >
            <bean class="io.cattle.platform.configitem.spring.URLArrayFactory" >
                <property name="locations" value="classpath*:/config-content/**/*" />
            </bean>
        </property>
        <property name="factories" value="#{extensionManager.list('config.item.context.factory')}" />
        <property name="additionalRevisionData">
            <map>
                <entry key="agent-instance-startup">
                    <bean class="io.cattle.platform.configitem.context.impl.ConfigUrlInfoFactory" />
                </entry>
            </map>
        </property>
    </bean>

    <bean class="io.cattle.platform.configitem.server.template.impl.DefaultTemplateLoader" />
    <bean class="io.cattle.platform.configitem.server.template.impl.FreemarkerTemplateLoader" />

    <bean class="io.cattle.platform.configitem.server.template.impl.TemplateFactoryImpl" />

    <bean id="FreemarkerConfig" class="io.cattle.platform.configitem.freemarker.Configuration">
        <property name="templateLoader">
            <bean class="io.cattle.platform.configitem.server.template.impl.FreemarkerURLTemplateLoader" />
        </property>
        <property name="localizedLookup" value="false" />
        <property name="numberFormat" value="computer" />
    </bean>

    <bean class="io.cattle.platform.configitem.server.task.ItemSyncTask" />
    <bean class="io.cattle.platform.configitem.server.task.ItemMigrationTask" />
    <bean class="io.cattle.platform.configitem.server.task.ItemSourceVersionSyncTask" />

    <bean class="io.cattle.platform.configitem.server.agentinclude.impl.AgentIncludeConfigItemFactoryImpl" >
        <property name="fileRoot" value="../../../resources/content/agent/agent-include" />
        <property name="root" value="agent" />
        <property name="resources" >
            <bean class="io.cattle.platform.configitem.spring.URLArrayFactory" >
                <property name="locations" value="classpath*:agent/agent-include/**/*" />
            </bean>
        </property>
        <property name="factories" value="#{extensionManager.list('config.item.context.factory')}" />
    </bean>
    <bean class="io.cattle.platform.configitem.server.agentinclude.impl.AgentIncludeMapImpl" />

    <context:component-scan base-package="io.cattle.platform.configitem.context.impl" />
    
    <bean class="io.cattle.platform.configitem.context.dao.impl.HealthcheckInfoDaoImpl" />


    <bean class="io.cattle.platform.docker.api.ExecActionHandler" />
    <bean class="io.cattle.platform.docker.api.ContainerLogsActionHandler" />
    <bean class="io.cattle.platform.docker.api.ContainerProxyActionHandler" />
    <bean class="io.cattle.platform.docker.api.DockerSocketProxyActionHandler" />
    <bean class="io.cattle.platform.docker.api.container.ServiceProxyManager" />

    <bean id="DockerApiTypes" class="io.cattle.platform.object.meta.TypeSet" >
        <property name="typeClasses">
            <list>
                <value>io.cattle.platform.docker.api.model.ContainerExec</value>
                <value>io.cattle.platform.docker.api.model.ContainerLogs</value>
                <value>io.cattle.platform.docker.api.model.ContainerProxy</value>
                <value>io.cattle.platform.docker.api.model.ServiceProxy</value>
                <value>io.cattle.platform.docker.api.model.HostAccess</value>
                <value>io.cattle.platform.docker.api.model.DockerBuild</value>
            </list>
        </property>
    </bean>

    <bean id="ExtensionTypeSet" class="io.cattle.platform.object.meta.TypeSet" >
        <property name="typeClasses">
            <list>
                <value>io.cattle.platform.extension.ExtensionImplementation</value>
                <value>io.cattle.platform.extension.ExtensionPoint</value>
                <value>io.cattle.platform.extension.api.model.ProcessDefinitionApi</value>
                <value>io.cattle.platform.extension.api.model.ResourceDefinition</value>
                <value>io.cattle.platform.engine.process.StateTransition</value>
                <value>io.cattle.platform.iaas.api.auth.identity.Token</value>
                <value>io.cattle.platform.iaas.api.auth.integration.github.resource.GithubConfig</value>
                <value>io.cattle.platform.iaas.api.auth.projects.Member</value>
                <value>io.cattle.platform.api.auth.Identity</value>
                <value>io.cattle.platform.iaas.api.auth.integration.ldap.ad.ADConfig</value>
                <value>io.cattle.platform.iaas.api.auth.integration.ldap.OpenLDAP.OpenLDAPConfig</value>
                <value>io.cattle.platform.iaas.api.auth.integration.local.LocalAuthConfig</value>
            </list>
        </property>
    </bean>

    <bean class="io.cattle.platform.extension.api.manager.ExtensionManagerApi" />
    <bean class="io.cattle.platform.extension.api.manager.ProcessDefinitionApiManager" >
        <property name="processDefinitions" value="#{extensionManager.list('process.definition')}" />
    </bean>
    <bean class="io.cattle.platform.extension.api.manager.ResourceDefinitionManager" >
        <property name="processDefinitions" value="#{extensionManager.list('process.definition')}" />
    </bean>

    <bean class="io.cattle.platform.extension.api.dot.DotMaker" >
        <property name="processDefinitions" value="#{extensionManager.list('process.definition')}" />
    </bean>

    <!-- This really shouldn't be here, it's because LinkHandler and ActionHandler are
         not properly managed and rely on Spring auto wiring and not the ExtensionManager -->
    <bean class="io.cattle.platform.host.stats.api.StatsLinkHandler" />
    <bean class="io.cattle.platform.host.stats.api.HostStatsLinkHandler" />
    <bean class="io.cattle.platform.host.stats.api.ContainerStatsLinkHandler" />
    <bean class="io.cattle.platform.host.stats.api.ServiceContainerStatsLinkHandler" />

    <bean class="io.cattle.platform.iaas.api.credential.SshKeyPemDownloadLinkHandler" />
    <bean class="io.cattle.platform.iaas.api.credential.ApiKeyCertificateDownloadLinkHandler" />
    <bean class="io.cattle.platform.iaas.api.ippool.IpPoolAcquireActionHandler" />
    <bean class="io.cattle.platform.docker.machine.api.MachineConfigLinkHandler" />

       <bean class="io.cattle.platform.iaas.api.auth.integration.local.ChangeSecretActionHandler" />
       <bean class="io.cattle.platform.iaas.api.machine.driver.MachineDriverErrorActionHandler" />
       <bean class="io.cattle.platform.iaas.api.machine.driver.MachineDriverRemoveActionHandler" />
       <bean class="io.cattle.platform.iaas.api.auth.dao.impl.PasswordDaoImpl" />
       <bean class="io.cattle.platform.iaas.api.auth.dao.impl.CredentialUniqueFilter" >
              <property name="schemaFactory" ref="CoreSchemaFactory" />
       </bean>

       <bean class="io.cattle.platform.iaas.api.account.AccountDeactivateActionHandler"/>
       <bean class="io.cattle.platform.servicediscovery.api.filter.ServiceCreateValidationFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.EnvironmentCreateValidationFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.ServiceAddRemoveLinkServiceValidationFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.ServiceDiscoveryEnvironmentOutputFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.ServiceSetServiceLinksValidationFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.ServiceOutputFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.LoadBalancerServiceCertificateRemoveFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.ServiceUpgradeValidationFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.SelectorServiceCreateValidationFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.ServiceRollbackValidationFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.HostOutputFilter" />
       <bean class="io.cattle.platform.servicediscovery.api.filter.ServiceRestartValidationFilter" />
       
       <bean class="io.cattle.platform.servicediscovery.api.service.impl.ServiceDiscoveryApiServiceImpl" />
       
       <bean class="io.cattle.platform.servicediscovery.api.action.AddOutputsActionHandler" />
       <bean class="io.cattle.platform.servicediscovery.api.action.AddServiceLinkActionHandler" />
       <bean class="io.cattle.platform.servicediscovery.api.action.EnvironmentExportConfigActionHandler" />
       <bean class="io.cattle.platform.servicediscovery.api.action.RemoveServiceLinkActionHandler" />
       <bean class="io.cattle.platform.servicediscovery.api.action.SetServiceLinksActionHandler" />
       <bean class="io.cattle.platform.servicediscovery.api.action.EnvironmentActivateServicesActionHandler" />
       <bean class="io.cattle.platform.servicediscovery.api.action.EnvironmentDeactivateServicesActionHandler" />
       <bean class="io.cattle.platform.servicediscovery.api.action.EnvironmentComposeLinkHandler" />
       
       <bean class="io.cattle.platform.servicediscovery.api.service.impl.RancherImageToComposeFormatter" />
       <bean class="io.cattle.platform.servicediscovery.api.service.impl.RancherGenericMapToComposeFormatter" />
       <bean class="io.cattle.platform.servicediscovery.api.service.impl.RancherCertificatesToComposeFormatter" />
       <bean class="io.cattle.platform.servicediscovery.api.service.impl.RancherRestartToComposeFormatter" />
       
       <bean class="io.cattle.platform.allocator.service.AllocatorServiceImpl" />
        
    <bean id="DynamicCoreModel" class="io.cattle.platform.object.meta.TypeSet" >
        <property name="typeClasses">
            <list>
                <value>io.cattle.platform.api.settings.model.ActiveSetting</value>
            </list>
        </property>
    </bean>

    <bean class="io.cattle.platform.api.settings.manager.SettingManager" />

    <bean class="io.cattle.platform.storage.api.filter.ExternalTemplateInstanceFilter" >
        <property name="schemaFactory" ref="CoreSchemaFactory" />
    </bean>

    <bean class="io.cattle.platform.task.action.TaskExecuteActionHandler" />

    <!-- This really shouldn't be here, it's because LinkHandler and ActionHandler are
         not properly managed and rely on Spring auto wiring and not the ExtensionManager -->
    <bean class="io.cattle.platform.vm.api.InstanceConsoleActionHandler" />

</beans>
