agent.resources=host,physicalHost,storagePool
agent.instance.image.uuid=docker:${agent.instance.image}
lb.instance.image.uuid=docker:${lb.instance.image}
agent.instance.name=Network Agent

agent.instance.start.items.apply=configscripts,services,agent-instance-scripts,monit
agent.instance.start.items.increment=agent-instance-startup

agent.instance.services.base.items=${agent.instance.start.items.apply},${agent.instance.start.items.increment}

agent.instance.services.processes=nic.activate,nic.deactivate,instance.start,instance.stop,instancehostmap.activate,instancelink.update,instancelink.activate,hostipaddressmap.activate,serviceexposemap.create,serviceconsumemap.create,serviceconsumemap.update,serviceconsumemap.remove,service.activate,service.deactivate,service.update,service.remove,healthcheckinstancehostmap.create,networkserviceproviderinstancemap.activate,networkserviceproviderinstancemap.remove,ipaddress.update,host.create,host.update,host.remove,instance.updateunhealthy,instance.updatehealthy,account.update,instance.remove,healthcheckinstancehostmap.remove

ipaddress.update.agentInstanceProvider.ipsecTunnelService.increment=hosts,ipsec-hosts,ipsec

nic.activate.agentInstanceProvider.base.items=true

nic.activate.agentInstanceProvider.dnsService.apply=node-services
nic.activate.agentInstanceProvider.dnsService.increment=hosts,iptables

nic.deactivate.agentInstanceProvider.dnsService.apply=
nic.deactivate.agentInstanceProvider.dnsService.increment=hosts

nic.activate.agentInstanceProvider.dhcpService.apply=
nic.activate.agentInstanceProvider.dhcpService.increment=hosts

nic.activate.agentInstanceProvider.ipsecTunnelService.apply=ipsec
nic.activate.agentInstanceProvider.ipsecTunnelService.increment=ipsec-hosts

hostipaddressmap.activate.agentInstanceProvider.ipsecTunnelService.increment=ipsec-hosts

host.agent.instance.services.processes=instancehostmap.activate,instancehostmap.deactivate,port.update,port.activate,port.deactivate,ipassociation.activate,ipassociation.deactivate

host.port.activate.agentInstanceProvider.portService.increment=host-iptables
host.port.update.agentInstanceProvider.portService.increment=host-iptables
host.port.deactivate.agentInstanceProvider.portService.increment=host-iptables
host.instancehostmap.activate.agentInstanceProvider.portService.increment=host-routes
host.instancehostmap.activate.agentInstanceProvider.hostNatGatewayService.increment=host-routes,host-iptables
host.instancehostmap.deactivate.agentInstanceProvider.hostNatGatewayService.increment=host-routes,host-iptables

host.ipassociation.activate.agentInstanceProvider.hostNatGatewayService.increment=host-routes,host-iptables
host.ipassociation.deactivate.agentInstanceProvider.hostNatGatewayService.increment=host-routes,host-iptables

serviceconsumemap.create.agentInstanceProvider.dnsService.increment=hosts
serviceconsumemap.remove.agentInstanceProvider.dnsService.increment=hosts
serviceconsumemap.update.agentInstanceProvider.dnsService.increment=hosts
serviceexposemap.create.agentInstanceProvider.dnsService.increment=hosts
serviceexposemap.remove.agentInstanceProvider.dnsService.increment=hosts
instancelink.update.agentInstanceProvider.dnsService.increment=hosts
service.activate.agentInstanceProvider.dnsService.increment=hosts
service.deactivate.agentInstanceProvider.dnsService.increment=hosts
service.update.agentInstanceProvider.dnsService.increment=hosts
service.remove.agentInstanceProvider.dnsService.increment=hosts
networkserviceproviderinstancemap.activate.agentInstanceProvider.dnsService.increment=hosts
networkserviceproviderinstancemap.remove.agentInstanceProvider.dnsService.increment=hosts
host.create.agentInstanceProvider.dnsService.increment=hosts
host.update.agentInstanceProvider.dnsService.increment=hosts
host.remove.agentInstanceProvider.dnsService.increment=hosts
instance.updatehealthy.agentInstanceProvider.dnsService.increment=hosts
instance.updateunhealthy.agentInstanceProvider.dnsService.increment=hosts
account.update.agentInstanceProvider.dnsService.increment=hosts
instance.remove.agentInstanceProvider.dnsService.increment=hosts
instancehostmap.activate.agentInstanceProvider.dnsService.increment=hosts
healthcheckinstancehostmap.create.agentInstanceProvider.dnsService.increment=hosts
healthcheckinstancehostmap.remove.agentInstanceProvider.dnsService.increment=hosts

metadata.increment.processes=account.update, \
    accountlink.create, \
    accountlink.remove, \
    agent.activate, \
    agent.remove, \
    agent.deactivate, \
    agent.disconnect, \
    agent.reconnect, \
    agent.finishreconnect, \
    healthcheckinstancehostmap.create, \
    host.create, \
    hostipaddressmap.activate, \
    host.remove, \
    host.update, \
    host.activate, \
    host.deactivate, \
    instancehostmap.activate, \
    instancehostmap.deactivate, \
    instancelink.update, \
    instance.remove, \
    instance.start, \
    instance.stop, \
    instance.updatehealthy, \
    instance.updateunhealthy, \
    ipaddress.update, \
    ipassociation.activate, \
    ipassociation.deactivate, \
    network.update, \
    nic.activate, \
    nic.deactivate, \
    port.activate, \
    port.deactivate, \
    port.update, \
    service.activate, \
    serviceconsumemap.create, \
    serviceconsumemap.remove, \
    serviceconsumemap.update, \
    service.deactivate, \
    serviceexposemap.create, \
    serviceexposemap.remove, \
    service.remove, \
    service.update, \
    stack.update

item.wait.for.event.tries=3
item.wait.for.event.timeout.millis=7500
item.sync.batch.size=100
item.migration.block.on.failure=false
item.priority=configscripts
docker.index.url=https://index.docker.io
docker.index.server=index.docker.io
docker.index.user=
docker.index.pass=

eventing.retry=1
eventing.timeout.millis=45000
eventing.pool.default.count=500

eventing.reply.pool.maxtotal=1000000
eventing.reply.pool.maxidle=1000
hazelcast.group.name=
hazelcast.group.password=
hazelcast.jmx=true
hazelcast.logging.type=slf4j

module.profile.hazelcast.config.basic=true
module.profile.hazelcast.config.custom=false
module.profile.hazelcast.lock=false
module.profile.hazelcast.eventing=false

graphite.host=
graphite.port=2003
graphite.options=
jmx.trans.export.interval.seconds=30
jmx.trans.query.interval.seconds=5
mac.unassigned.prefix=04
mac.prefix.start=02:00:01
mac.prefix.end=02:ff:ff

link.internal.port.start=20000
link.internal.port.end=39999

host.port.start=20000
host.port.end=39999

environment.services.port.range=49153-65535

instance.link.target.wait.time.millis=15000

ipsec.psk.byte.length=16

ha.instance.state.cache.millis=300000
ha.host.id.cache.millis=3600000

# 10 years
registration.token.period.millis=315360000000
docker.register.command=sudo docker run --rm --privileged %s-v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/rancher:/var/lib/rancher %s %s
docker.register.windows.command=docker run --rm -v "C:\\Program Files\\rancher:C:\\Program Files\\rancher" %s

agent.image=cattle/agent:latest
agent.instance.register.script=registration/registration.sh
agent.instance.register.url=

sample.setup=true

task.project.template.reload.schedule=300

task.purge.resources.schedule=60
task.remove.resources.schedule=60
remove.resources.after=300
task.resource.change.monitor.schedule=120
resource.monitor.default.wait.millis=45000

task.region.monitor.schedule=60

task.retry.timeout.schedule=1
service.remove.wait.time.millis=60000
service.activate.wait.time.millis=60000
service.deactivate.wait.time.millis=60000

service.create.schema.allowed.types=\
    string,int,enum,password,float,date,boolean,json, \
    map[string],map[int],map[enum],map[password],map[float],map[date],map[boolean], \
    array[string],array[int],array[enum],array[password],array[float],array[date],array[boolean]

# 1 week
task.purge.after.seconds=604800
# 1 Day
task.cleanup.task.instances.schedule=86400
zookeeper.lock.path=/cattle/locks
zookeeper.stale.lock.seconds=60
task.zookeeper.cleanup.schedule=900

zookeeper.connection.timeout.millis=30000
zookeeper.connection.string=localhost
zookeeper.session.timeout.millis=30000
zookeeper.sleep.between.retry.time=1000
zookeeper.retries=3

project.template.defaults=true

cluster.default.port=9345
cluster.checkin.seconds=5
cluster.checkin.misses=3
cluster.default.http.port=8080

loadbalancher.drain.image.version=v0.7.12
