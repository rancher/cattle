provisioning.enabled=true

process.account.create.create.credential=true
process.account.create.create.credential.default.kind=apiKey
process.account.create.create.credential.account.kinds=agent

process.credential.create.bad.characters=[O0lI+/=]

process.agent.create.create.account=true

activate.by.default.account=true
activate.by.default.agent=true
activate.by.default.credential=true
activate.by.default.externalHandler=true
activate.by.default.externalHandlerProcess=true
activate.by.default.externalHandlerExternalHandlerProcessMap=true
activate.by.default.hostIpAddressMap=true
activate.by.default.hostVnetMap=true
activate.by.default.image=true
activate.by.default.instanceNetworkMap=true
activate.by.default.ipAddress=true
activate.by.default.ipAddressNicMap=true
activate.by.default.ipPool=true
activate.by.default.network=true
activate.by.default.networkService=true
activate.by.default.networkServiceProvider=true
activate.by.default.networkServiceProviderInstanceMap=true
activate.by.default.projectMember=true
activate.by.default.physicalHost=true
activate.by.default.storagePool=true
activate.by.default.register=true
activate.by.default.subnet=true
activate.by.default.subnetVnetMap=true
activate.by.default.userPreference=true
activate.by.default.vnet=true

event.data.credential=registry
event.data.imageStoragePoolMap=storagePool|image[${event.data.image}]
event.data.image=registryCredential[${event.data.credential}]
event.data.instance=volumes[${event.data.volume}]|image[${event.data.image}]|ports|nics[${event.data.nic}]|instanceLinks[targetInstance]|networkContainer
event.data.instanceHostMap=instance[${event.data.instance}]|host
event.data.nic=ipAddresses[subnet]|network
event.data.volume=instance|storagePools|image
event.data.volumeStoragePoolMap=volume[${event.data.volume}]|storagePool
event.data.snapshot=volume
event.data.backup=snapshot[volume]|backupTarget
event.data.stack=

agent.config.items=host-config,pyagent,configscripts
agent.disconnect.after.seconds=180

# If negative, random 0-abs(value)
object.remove.time.delay.seconds=-600

process.containerevent.blocking=true
process.service.blocking=true
process.instance.blocking=true
process.volumestoragepoolmap.blocking=true
process.physicalhost.blocking=true
process.host.blocking=true
process.agent.activate.blocking=true
process.agent.reconnect.blocking=true
process.deploymentunit.blocking=true

process.containerevent.priority=100
process.agent.reconnect.priority=200
process.instance.priority=50
process.externalhandler.create.priority=100
process.externalhandler.deactivate.priority=100
process.externalhandler.purge.priority=100
process.externalhandler.remove.priority=100
process.purge.priority=-100

instance.compute.tries=5

agent.activate.ping.retries=30
agent.activate.ping.timeout=2000

manage.nonrancher.containers=true

# The below are in the format name;start;transitioning;done;delegate(optional)
generic.resource.process.0=%s.create;requested;registering;inactive;%s.activate
generic.resource.process.1=%s.activate;inactive,registering;activating;active
generic.resource.process.2=%s.deactivate;requested,registering,active,activating,updating-active,updating-inactive;deactivating;inactive
generic.resource.process.3=%s.remove;requested,inactive,registering,updating-active,updating-inactive;removing;removed
generic.resource.process.4=%s.purge;removed;purging;purged
generic.resource.process.5=%s.update;inactive,active;inactive=updating-inactive,active=updating-active;updating-inactive=inactive,updating-active=active
generic.resource.process.6=%s.restore;removed;restoring;inactive
docker.network.create.account.types=project
docker.vip.subnet.cidr=169.254.64.0/18

machine.service.executable=go-machine-service
machine.execute=false

machine.driver.config=file:///var/lib/rancher/etc/machinedrivers.json

compose.executor.service.executable=rancher-compose-executor
compose.executor.execute=false

catalog.service.executable=rancher-catalog-service
catalog.execute=false

traefik.executable=traefik
traefik.execute=false

access.log=/dev/null

cluster.id.file=cluster-id

# If you change this change rancher/server's server/Dockerfile too
catalog.url={"catalogs":{"community":{"url":"https://git.rancher.io/community-catalog.git","branch":"master"},"library":{"url":"https://git.rancher.io/rancher-catalog.git","branch":"v1.5.0-dev"}}}
catalog.refresh.interval.seconds=300

telemetry.service.executable=telemetry

registry.default=
registry.whitelist=

auth.service.executable=rancher-auth-service
auth.service.execute=false

api.auth.local.validate.url=
api.auth.local.validate.description=
api.auth.local.validate.timeout.milliseconds=10000

webhook.service.executable=webhook-service
webhook.service.execute=false

