#!/bin/bash
set -e

echo $(hostname)

cd $(dirname $0)

export RUNTIME_DIR=../../../runtime/ci/
export RUNTIME_DIR_CLEAN=true
export CATTLE_LOGBACK_ROOT_LEVEL=error
export CATTLE_DB_CATTLE_DATABASE=mysql
export CATTLE_WAIT_SLEEP_TIME=0.002

: ${CATTLE_DB_CATTLE_MYSQL_PORT:=13306}
export CATTLE_DB_CATTLE_MYSQL_PORT

# Uncomment this if you're impatient
#export CATTLE_IDEMPOTENT_CHECKS=false


if [ -x "$(which wrapdocker)" ]; then
    echo Launching Docker
    wrapdocker >/tmp/docker.log 2>&1
    docker info
fi

run()
{
    echo Running "$@"

    "$@" > /tmp/${1}.log || {
        echo "$@" failed
        cat /tmp/${1}.log
        echo "$@" failed
        exit 1
    }
}

# Background to start the Docker pulls
./test-warm >/dev/null &

run ./bootstrap
run ./clean
CI=true MAVEN_ARGS='-B -q' ./build

run ./run --background

# Wait for completion now to ensure that images are pulled
./test-warm

DEV_HOST=localhost:8081 ../tools/development/register-boot2docker.sh >/tmp/register.log &

./wait-for-hosts

./test || {
    echo Test failed
    cat /tmp/run.log
    echo Test failed
    exit 1
}

# Now test H2

echo "Testing H2"

export RUNTIME_DIR=../../../runtime/ci-h2/
export RUNTIME_DIR_CLEAN=true
export CATTLE_DB_CATTLE_DATABASE=h2
export CATTLE_TEST_HTTP_PORT=8082
export CATTLE_TEST_URL=http://localhost:8082/v1/schemas

run ./run --background
./test -e py27 -- core/test_virtual_machine.py core/test_container.py || {
    echo Test failed
    cat /tmp/run.log
    echo Test failed
    exit 1
}
