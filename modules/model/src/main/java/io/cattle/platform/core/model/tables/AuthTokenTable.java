/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.AuthTokenRecord;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthTokenTable extends TableImpl<AuthTokenRecord> {

    private static final long serialVersionUID = -108488415;

    /**
     * The reference instance of <code>cattle.auth_token</code>
     */
    public static final AuthTokenTable AUTH_TOKEN = new AuthTokenTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthTokenRecord> getRecordType() {
        return AuthTokenRecord.class;
    }

    /**
     * The column <code>cattle.auth_token.id</code>.
     */
    public final TableField<AuthTokenRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.auth_token.account_id</code>.
     */
    public final TableField<AuthTokenRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.auth_token.created</code>.
     */
    public final TableField<AuthTokenRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new DateConverter());

    /**
     * The column <code>cattle.auth_token.expires</code>.
     */
    public final TableField<AuthTokenRecord, Date> EXPIRES = createField("expires", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new DateConverter());

    /**
     * The column <code>cattle.auth_token.key</code>.
     */
    public final TableField<AuthTokenRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

    /**
     * The column <code>cattle.auth_token.value</code>.
     */
    public final TableField<AuthTokenRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>cattle.auth_token.version</code>.
     */
    public final TableField<AuthTokenRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.auth_token.provider</code>.
     */
    public final TableField<AuthTokenRecord, String> PROVIDER = createField("provider", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.auth_token.authenticated_as_account_id</code>.
     */
    public final TableField<AuthTokenRecord, Long> AUTHENTICATED_AS_ACCOUNT_ID = createField("authenticated_as_account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>cattle.auth_token</code> table reference
     */
    public AuthTokenTable() {
        this("auth_token", null);
    }

    /**
     * Create an aliased <code>cattle.auth_token</code> table reference
     */
    public AuthTokenTable(String alias) {
        this(alias, AUTH_TOKEN);
    }

    private AuthTokenTable(String alias, Table<AuthTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthTokenTable(String alias, Table<AuthTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AuthTokenRecord, Long> getIdentity() {
        return Keys.IDENTITY_AUTH_TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthTokenRecord> getPrimaryKey() {
        return Keys.KEY_AUTH_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthTokenRecord>>asList(Keys.KEY_AUTH_TOKEN_PRIMARY, Keys.KEY_AUTH_TOKEN_IDX_AUTH_TOKEN_KEY, Keys.KEY_AUTH_TOKEN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthTokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthTokenRecord, ?>>asList(Keys.FK_AUTH_TOKEN__ACCOUNT_ID, Keys.AUTH_TOKEN_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthTokenTable as(String alias) {
        return new AuthTokenTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthTokenTable rename(String name) {
        return new AuthTokenTable(name, null);
    }
}
