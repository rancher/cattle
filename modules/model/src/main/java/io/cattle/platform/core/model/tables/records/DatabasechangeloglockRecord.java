/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables.records;


import io.cattle.platform.core.model.Databasechangeloglock;
import io.cattle.platform.core.model.tables.DatabasechangeloglockTable;
import io.cattle.platform.db.jooq.utils.TableRecordJaxb;

import java.util.Date;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "DATABASECHANGELOGLOCK", schema = "cattle")
public class DatabasechangeloglockRecord extends UpdatableRecordImpl<DatabasechangeloglockRecord> implements TableRecordJaxb, Record4<Integer, Boolean, Date, String>, Databasechangeloglock {

    private static final long serialVersionUID = -1259205864;

    /**
     * Setter for <code>cattle.DATABASECHANGELOGLOCK.ID</code>.
     */
    @Override
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>cattle.DATABASECHANGELOGLOCK.ID</code>.
     */
    @Id
    @Column(name = "ID", unique = true, nullable = false, precision = 10)
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>cattle.DATABASECHANGELOGLOCK.LOCKED</code>.
     */
    @Override
    public void setLocked(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>cattle.DATABASECHANGELOGLOCK.LOCKED</code>.
     */
    @Column(name = "LOCKED", nullable = false, precision = 1)
    @Override
    public Boolean getLocked() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>cattle.DATABASECHANGELOGLOCK.LOCKGRANTED</code>.
     */
    @Override
    public void setLockgranted(Date value) {
        set(2, value);
    }

    /**
     * Getter for <code>cattle.DATABASECHANGELOGLOCK.LOCKGRANTED</code>.
     */
    @Column(name = "LOCKGRANTED")
    @Override
    public Date getLockgranted() {
        return (Date) get(2);
    }

    /**
     * Setter for <code>cattle.DATABASECHANGELOGLOCK.LOCKEDBY</code>.
     */
    @Override
    public void setLockedby(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>cattle.DATABASECHANGELOGLOCK.LOCKEDBY</code>.
     */
    @Column(name = "LOCKEDBY", length = 255)
    @Override
    public String getLockedby() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Boolean, Date, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Boolean, Date, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return DatabasechangeloglockTable.DATABASECHANGELOGLOCK.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field2() {
        return DatabasechangeloglockTable.DATABASECHANGELOGLOCK.LOCKED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Date> field3() {
        return DatabasechangeloglockTable.DATABASECHANGELOGLOCK.LOCKGRANTED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return DatabasechangeloglockTable.DATABASECHANGELOGLOCK.LOCKEDBY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value2() {
        return getLocked();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date value3() {
        return getLockgranted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getLockedby();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabasechangeloglockRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabasechangeloglockRecord value2(Boolean value) {
        setLocked(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabasechangeloglockRecord value3(Date value) {
        setLockgranted(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabasechangeloglockRecord value4(String value) {
        setLockedby(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabasechangeloglockRecord values(Integer value1, Boolean value2, Date value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(Databasechangeloglock from) {
        setId(from.getId());
        setLocked(from.getLocked());
        setLockgranted(from.getLockgranted());
        setLockedby(from.getLockedby());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends Databasechangeloglock> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatabasechangeloglockRecord
     */
    public DatabasechangeloglockRecord() {
        super(DatabasechangeloglockTable.DATABASECHANGELOGLOCK);
    }

    /**
     * Create a detached, initialised DatabasechangeloglockRecord
     */
    public DatabasechangeloglockRecord(Integer id, Boolean locked, Date lockgranted, String lockedby) {
        super(DatabasechangeloglockTable.DATABASECHANGELOGLOCK);

        set(0, id);
        set(1, locked);
        set(2, lockgranted);
        set(3, lockedby);
    }
}
