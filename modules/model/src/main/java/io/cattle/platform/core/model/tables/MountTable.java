/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.MountRecord;
import io.cattle.platform.db.jooq.converter.DataConverter;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MountTable extends TableImpl<MountRecord> {

    private static final long serialVersionUID = -311728947;

    /**
     * The reference instance of <code>cattle.mount</code>
     */
    public static final MountTable MOUNT = new MountTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MountRecord> getRecordType() {
        return MountRecord.class;
    }

    /**
     * The column <code>cattle.mount.id</code>.
     */
    public final TableField<MountRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.mount.name</code>.
     */
    public final TableField<MountRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.mount.account_id</code>.
     */
    public final TableField<MountRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.mount.kind</code>.
     */
    public final TableField<MountRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.mount.uuid</code>.
     */
    public final TableField<MountRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.mount.description</code>.
     */
    public final TableField<MountRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>cattle.mount.state</code>.
     */
    public final TableField<MountRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.mount.created</code>.
     */
    public final TableField<MountRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.mount.removed</code>.
     */
    public final TableField<MountRecord, Date> REMOVED = createField("removed", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.mount.remove_time</code>.
     */
    public final TableField<MountRecord, Date> REMOVE_TIME = createField("remove_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.mount.data</code>.
     */
    public final TableField<MountRecord, Map<String,Object>> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "", new DataConverter());

    /**
     * The column <code>cattle.mount.volume_id</code>.
     */
    public final TableField<MountRecord, Long> VOLUME_ID = createField("volume_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.mount.instance_id</code>.
     */
    public final TableField<MountRecord, Long> INSTANCE_ID = createField("instance_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.mount.permissions</code>.
     */
    public final TableField<MountRecord, String> PERMISSIONS = createField("permissions", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>cattle.mount.path</code>.
     */
    public final TableField<MountRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * Create a <code>cattle.mount</code> table reference
     */
    public MountTable() {
        this("mount", null);
    }

    /**
     * Create an aliased <code>cattle.mount</code> table reference
     */
    public MountTable(String alias) {
        this(alias, MOUNT);
    }

    private MountTable(String alias, Table<MountRecord> aliased) {
        this(alias, aliased, null);
    }

    private MountTable(String alias, Table<MountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MountRecord, Long> getIdentity() {
        return Keys.IDENTITY_MOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MountRecord> getPrimaryKey() {
        return Keys.KEY_MOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MountRecord>> getKeys() {
        return Arrays.<UniqueKey<MountRecord>>asList(Keys.KEY_MOUNT_PRIMARY, Keys.KEY_MOUNT_IDX_MOUNT_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MountRecord, ?>>asList(Keys.FK_MOUNT__ACCOUNT_ID, Keys.FK_MOUNT__VOLUME_ID, Keys.FK_MOUNT__INSTANCE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MountTable as(String alias) {
        return new MountTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MountTable rename(String name) {
        return new MountTable(name, null);
    }
}
