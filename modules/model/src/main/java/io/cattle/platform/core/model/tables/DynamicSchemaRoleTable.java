/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.DynamicSchemaRoleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DynamicSchemaRoleTable extends TableImpl<DynamicSchemaRoleRecord> {

    private static final long serialVersionUID = 329918690;

    /**
     * The reference instance of <code>cattle.dynamic_schema_role</code>
     */
    public static final DynamicSchemaRoleTable DYNAMIC_SCHEMA_ROLE = new DynamicSchemaRoleTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DynamicSchemaRoleRecord> getRecordType() {
        return DynamicSchemaRoleRecord.class;
    }

    /**
     * The column <code>cattle.dynamic_schema_role.id</code>.
     */
    public final TableField<DynamicSchemaRoleRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.dynamic_schema_role.dynamic_schema_id</code>.
     */
    public final TableField<DynamicSchemaRoleRecord, Long> DYNAMIC_SCHEMA_ID = createField("dynamic_schema_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.dynamic_schema_role.role</code>.
     */
    public final TableField<DynamicSchemaRoleRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>cattle.dynamic_schema_role</code> table reference
     */
    public DynamicSchemaRoleTable() {
        this("dynamic_schema_role", null);
    }

    /**
     * Create an aliased <code>cattle.dynamic_schema_role</code> table reference
     */
    public DynamicSchemaRoleTable(String alias) {
        this(alias, DYNAMIC_SCHEMA_ROLE);
    }

    private DynamicSchemaRoleTable(String alias, Table<DynamicSchemaRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private DynamicSchemaRoleTable(String alias, Table<DynamicSchemaRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DynamicSchemaRoleRecord, Long> getIdentity() {
        return Keys.IDENTITY_DYNAMIC_SCHEMA_ROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DynamicSchemaRoleRecord> getPrimaryKey() {
        return Keys.KEY_DYNAMIC_SCHEMA_ROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DynamicSchemaRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<DynamicSchemaRoleRecord>>asList(Keys.KEY_DYNAMIC_SCHEMA_ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DynamicSchemaRoleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DynamicSchemaRoleRecord, ?>>asList(Keys.FK_DYNAMIC_SCHEMA_ROLE_DYNAMIC_SCHEMA_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DynamicSchemaRoleTable as(String alias) {
        return new DynamicSchemaRoleTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DynamicSchemaRoleTable rename(String name) {
        return new DynamicSchemaRoleTable(name, null);
    }
}
