/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model;


import io.cattle.platform.core.model.tables.AccountTable;
import io.cattle.platform.core.model.tables.AgentTable;
import io.cattle.platform.core.model.tables.AuditLogTable;
import io.cattle.platform.core.model.tables.AuthTokenTable;
import io.cattle.platform.core.model.tables.CertificateTable;
import io.cattle.platform.core.model.tables.ClusterTable;
import io.cattle.platform.core.model.tables.CredentialTable;
import io.cattle.platform.core.model.tables.DataTable;
import io.cattle.platform.core.model.tables.DatabasechangeloglockTable;
import io.cattle.platform.core.model.tables.DeploymentUnitTable;
import io.cattle.platform.core.model.tables.DynamicSchemaRoleTable;
import io.cattle.platform.core.model.tables.DynamicSchemaTable;
import io.cattle.platform.core.model.tables.ExternalEventTable;
import io.cattle.platform.core.model.tables.GenericObjectTable;
import io.cattle.platform.core.model.tables.HaMembershipTable;
import io.cattle.platform.core.model.tables.HostTable;
import io.cattle.platform.core.model.tables.HostTemplateTable;
import io.cattle.platform.core.model.tables.InstanceTable;
import io.cattle.platform.core.model.tables.KeyValueTable;
import io.cattle.platform.core.model.tables.MachineDriverTable;
import io.cattle.platform.core.model.tables.MountTable;
import io.cattle.platform.core.model.tables.NetworkDriverTable;
import io.cattle.platform.core.model.tables.NetworkTable;
import io.cattle.platform.core.model.tables.ProcessExecutionTable;
import io.cattle.platform.core.model.tables.ProcessInstanceTable;
import io.cattle.platform.core.model.tables.ProjectMemberTable;
import io.cattle.platform.core.model.tables.ResourcePoolTable;
import io.cattle.platform.core.model.tables.RevisionTable;
import io.cattle.platform.core.model.tables.ScheduledUpgradeTable;
import io.cattle.platform.core.model.tables.SecretTable;
import io.cattle.platform.core.model.tables.ServiceEventTable;
import io.cattle.platform.core.model.tables.ServiceLogTable;
import io.cattle.platform.core.model.tables.ServiceTable;
import io.cattle.platform.core.model.tables.SettingTable;
import io.cattle.platform.core.model.tables.StackTable;
import io.cattle.platform.core.model.tables.StorageDriverTable;
import io.cattle.platform.core.model.tables.StoragePoolHostMapTable;
import io.cattle.platform.core.model.tables.StoragePoolTable;
import io.cattle.platform.core.model.tables.SubnetTable;
import io.cattle.platform.core.model.tables.UserPreferenceTable;
import io.cattle.platform.core.model.tables.VolumeStoragePoolMapTable;
import io.cattle.platform.core.model.tables.VolumeTable;
import io.cattle.platform.core.model.tables.VolumeTemplateTable;
import io.cattle.platform.core.model.tables.records.AccountRecord;
import io.cattle.platform.core.model.tables.records.AgentRecord;
import io.cattle.platform.core.model.tables.records.AuditLogRecord;
import io.cattle.platform.core.model.tables.records.AuthTokenRecord;
import io.cattle.platform.core.model.tables.records.CertificateRecord;
import io.cattle.platform.core.model.tables.records.ClusterRecord;
import io.cattle.platform.core.model.tables.records.CredentialRecord;
import io.cattle.platform.core.model.tables.records.DataRecord;
import io.cattle.platform.core.model.tables.records.DatabasechangeloglockRecord;
import io.cattle.platform.core.model.tables.records.DeploymentUnitRecord;
import io.cattle.platform.core.model.tables.records.DynamicSchemaRecord;
import io.cattle.platform.core.model.tables.records.DynamicSchemaRoleRecord;
import io.cattle.platform.core.model.tables.records.ExternalEventRecord;
import io.cattle.platform.core.model.tables.records.GenericObjectRecord;
import io.cattle.platform.core.model.tables.records.HaMembershipRecord;
import io.cattle.platform.core.model.tables.records.HostRecord;
import io.cattle.platform.core.model.tables.records.HostTemplateRecord;
import io.cattle.platform.core.model.tables.records.InstanceRecord;
import io.cattle.platform.core.model.tables.records.KeyValueRecord;
import io.cattle.platform.core.model.tables.records.MachineDriverRecord;
import io.cattle.platform.core.model.tables.records.MountRecord;
import io.cattle.platform.core.model.tables.records.NetworkDriverRecord;
import io.cattle.platform.core.model.tables.records.NetworkRecord;
import io.cattle.platform.core.model.tables.records.ProcessExecutionRecord;
import io.cattle.platform.core.model.tables.records.ProcessInstanceRecord;
import io.cattle.platform.core.model.tables.records.ProjectMemberRecord;
import io.cattle.platform.core.model.tables.records.ResourcePoolRecord;
import io.cattle.platform.core.model.tables.records.RevisionRecord;
import io.cattle.platform.core.model.tables.records.ScheduledUpgradeRecord;
import io.cattle.platform.core.model.tables.records.SecretRecord;
import io.cattle.platform.core.model.tables.records.ServiceEventRecord;
import io.cattle.platform.core.model.tables.records.ServiceLogRecord;
import io.cattle.platform.core.model.tables.records.ServiceRecord;
import io.cattle.platform.core.model.tables.records.SettingRecord;
import io.cattle.platform.core.model.tables.records.StackRecord;
import io.cattle.platform.core.model.tables.records.StorageDriverRecord;
import io.cattle.platform.core.model.tables.records.StoragePoolHostMapRecord;
import io.cattle.platform.core.model.tables.records.StoragePoolRecord;
import io.cattle.platform.core.model.tables.records.SubnetRecord;
import io.cattle.platform.core.model.tables.records.UserPreferenceRecord;
import io.cattle.platform.core.model.tables.records.VolumeRecord;
import io.cattle.platform.core.model.tables.records.VolumeStoragePoolMapRecord;
import io.cattle.platform.core.model.tables.records.VolumeTemplateRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>cattle</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AccountRecord, Long> IDENTITY_ACCOUNT = Identities0.IDENTITY_ACCOUNT;
    public static final Identity<AgentRecord, Long> IDENTITY_AGENT = Identities0.IDENTITY_AGENT;
    public static final Identity<AuditLogRecord, Long> IDENTITY_AUDIT_LOG = Identities0.IDENTITY_AUDIT_LOG;
    public static final Identity<AuthTokenRecord, Long> IDENTITY_AUTH_TOKEN = Identities0.IDENTITY_AUTH_TOKEN;
    public static final Identity<CertificateRecord, Long> IDENTITY_CERTIFICATE = Identities0.IDENTITY_CERTIFICATE;
    public static final Identity<ClusterRecord, Long> IDENTITY_CLUSTER = Identities0.IDENTITY_CLUSTER;
    public static final Identity<CredentialRecord, Long> IDENTITY_CREDENTIAL = Identities0.IDENTITY_CREDENTIAL;
    public static final Identity<DataRecord, Long> IDENTITY_DATA = Identities0.IDENTITY_DATA;
    public static final Identity<DeploymentUnitRecord, Long> IDENTITY_DEPLOYMENT_UNIT = Identities0.IDENTITY_DEPLOYMENT_UNIT;
    public static final Identity<DynamicSchemaRecord, Long> IDENTITY_DYNAMIC_SCHEMA = Identities0.IDENTITY_DYNAMIC_SCHEMA;
    public static final Identity<DynamicSchemaRoleRecord, Long> IDENTITY_DYNAMIC_SCHEMA_ROLE = Identities0.IDENTITY_DYNAMIC_SCHEMA_ROLE;
    public static final Identity<ExternalEventRecord, Long> IDENTITY_EXTERNAL_EVENT = Identities0.IDENTITY_EXTERNAL_EVENT;
    public static final Identity<GenericObjectRecord, Long> IDENTITY_GENERIC_OBJECT = Identities0.IDENTITY_GENERIC_OBJECT;
    public static final Identity<HaMembershipRecord, Long> IDENTITY_HA_MEMBERSHIP = Identities0.IDENTITY_HA_MEMBERSHIP;
    public static final Identity<HostRecord, Long> IDENTITY_HOST = Identities0.IDENTITY_HOST;
    public static final Identity<HostTemplateRecord, Long> IDENTITY_HOST_TEMPLATE = Identities0.IDENTITY_HOST_TEMPLATE;
    public static final Identity<InstanceRecord, Long> IDENTITY_INSTANCE = Identities0.IDENTITY_INSTANCE;
    public static final Identity<MachineDriverRecord, Long> IDENTITY_MACHINE_DRIVER = Identities0.IDENTITY_MACHINE_DRIVER;
    public static final Identity<MountRecord, Long> IDENTITY_MOUNT = Identities0.IDENTITY_MOUNT;
    public static final Identity<NetworkRecord, Long> IDENTITY_NETWORK = Identities0.IDENTITY_NETWORK;
    public static final Identity<NetworkDriverRecord, Long> IDENTITY_NETWORK_DRIVER = Identities0.IDENTITY_NETWORK_DRIVER;
    public static final Identity<ProcessExecutionRecord, Long> IDENTITY_PROCESS_EXECUTION = Identities0.IDENTITY_PROCESS_EXECUTION;
    public static final Identity<ProcessInstanceRecord, Long> IDENTITY_PROCESS_INSTANCE = Identities0.IDENTITY_PROCESS_INSTANCE;
    public static final Identity<ProjectMemberRecord, Long> IDENTITY_PROJECT_MEMBER = Identities0.IDENTITY_PROJECT_MEMBER;
    public static final Identity<ResourcePoolRecord, Long> IDENTITY_RESOURCE_POOL = Identities0.IDENTITY_RESOURCE_POOL;
    public static final Identity<RevisionRecord, Long> IDENTITY_REVISION = Identities0.IDENTITY_REVISION;
    public static final Identity<ScheduledUpgradeRecord, Long> IDENTITY_SCHEDULED_UPGRADE = Identities0.IDENTITY_SCHEDULED_UPGRADE;
    public static final Identity<SecretRecord, Long> IDENTITY_SECRET = Identities0.IDENTITY_SECRET;
    public static final Identity<ServiceRecord, Long> IDENTITY_SERVICE = Identities0.IDENTITY_SERVICE;
    public static final Identity<ServiceEventRecord, Long> IDENTITY_SERVICE_EVENT = Identities0.IDENTITY_SERVICE_EVENT;
    public static final Identity<ServiceLogRecord, Long> IDENTITY_SERVICE_LOG = Identities0.IDENTITY_SERVICE_LOG;
    public static final Identity<SettingRecord, Long> IDENTITY_SETTING = Identities0.IDENTITY_SETTING;
    public static final Identity<StackRecord, Long> IDENTITY_STACK = Identities0.IDENTITY_STACK;
    public static final Identity<StorageDriverRecord, Long> IDENTITY_STORAGE_DRIVER = Identities0.IDENTITY_STORAGE_DRIVER;
    public static final Identity<StoragePoolRecord, Long> IDENTITY_STORAGE_POOL = Identities0.IDENTITY_STORAGE_POOL;
    public static final Identity<StoragePoolHostMapRecord, Long> IDENTITY_STORAGE_POOL_HOST_MAP = Identities0.IDENTITY_STORAGE_POOL_HOST_MAP;
    public static final Identity<SubnetRecord, Long> IDENTITY_SUBNET = Identities0.IDENTITY_SUBNET;
    public static final Identity<UserPreferenceRecord, Long> IDENTITY_USER_PREFERENCE = Identities0.IDENTITY_USER_PREFERENCE;
    public static final Identity<VolumeRecord, Long> IDENTITY_VOLUME = Identities0.IDENTITY_VOLUME;
    public static final Identity<VolumeStoragePoolMapRecord, Long> IDENTITY_VOLUME_STORAGE_POOL_MAP = Identities0.IDENTITY_VOLUME_STORAGE_POOL_MAP;
    public static final Identity<VolumeTemplateRecord, Long> IDENTITY_VOLUME_TEMPLATE = Identities0.IDENTITY_VOLUME_TEMPLATE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = UniqueKeys0.KEY_ACCOUNT_PRIMARY;
    public static final UniqueKey<AccountRecord> KEY_ACCOUNT_IDX_ACCOUNT_UUID = UniqueKeys0.KEY_ACCOUNT_IDX_ACCOUNT_UUID;
    public static final UniqueKey<AgentRecord> KEY_AGENT_PRIMARY = UniqueKeys0.KEY_AGENT_PRIMARY;
    public static final UniqueKey<AgentRecord> KEY_AGENT_IDX_AGENT_UUID = UniqueKeys0.KEY_AGENT_IDX_AGENT_UUID;
    public static final UniqueKey<AuditLogRecord> KEY_AUDIT_LOG_PRIMARY = UniqueKeys0.KEY_AUDIT_LOG_PRIMARY;
    public static final UniqueKey<AuthTokenRecord> KEY_AUTH_TOKEN_PRIMARY = UniqueKeys0.KEY_AUTH_TOKEN_PRIMARY;
    public static final UniqueKey<AuthTokenRecord> KEY_AUTH_TOKEN_IDX_AUTH_TOKEN_KEY = UniqueKeys0.KEY_AUTH_TOKEN_IDX_AUTH_TOKEN_KEY;
    public static final UniqueKey<AuthTokenRecord> KEY_AUTH_TOKEN_KEY = UniqueKeys0.KEY_AUTH_TOKEN_KEY;
    public static final UniqueKey<CertificateRecord> KEY_CERTIFICATE_PRIMARY = UniqueKeys0.KEY_CERTIFICATE_PRIMARY;
    public static final UniqueKey<CertificateRecord> KEY_CERTIFICATE_IDX_CERT_DATA_UUID = UniqueKeys0.KEY_CERTIFICATE_IDX_CERT_DATA_UUID;
    public static final UniqueKey<ClusterRecord> KEY_CLUSTER_PRIMARY = UniqueKeys0.KEY_CLUSTER_PRIMARY;
    public static final UniqueKey<ClusterRecord> KEY_CLUSTER_IDX_CLUSTER_UUID = UniqueKeys0.KEY_CLUSTER_IDX_CLUSTER_UUID;
    public static final UniqueKey<CredentialRecord> KEY_CREDENTIAL_PRIMARY = UniqueKeys0.KEY_CREDENTIAL_PRIMARY;
    public static final UniqueKey<CredentialRecord> KEY_CREDENTIAL_IDX_CREDENTIAL_UUID = UniqueKeys0.KEY_CREDENTIAL_IDX_CREDENTIAL_UUID;
    public static final UniqueKey<DataRecord> KEY_DATA_PRIMARY = UniqueKeys0.KEY_DATA_PRIMARY;
    public static final UniqueKey<DataRecord> KEY_DATA_IDX_DATA_NAME = UniqueKeys0.KEY_DATA_IDX_DATA_NAME;
    public static final UniqueKey<DatabasechangeloglockRecord> KEY_DATABASECHANGELOGLOCK_PRIMARY = UniqueKeys0.KEY_DATABASECHANGELOGLOCK_PRIMARY;
    public static final UniqueKey<DeploymentUnitRecord> KEY_DEPLOYMENT_UNIT_PRIMARY = UniqueKeys0.KEY_DEPLOYMENT_UNIT_PRIMARY;
    public static final UniqueKey<DeploymentUnitRecord> KEY_DEPLOYMENT_UNIT_IDX_DEPLOYMENT_UNIT_UUID = UniqueKeys0.KEY_DEPLOYMENT_UNIT_IDX_DEPLOYMENT_UNIT_UUID;
    public static final UniqueKey<DynamicSchemaRecord> KEY_DYNAMIC_SCHEMA_PRIMARY = UniqueKeys0.KEY_DYNAMIC_SCHEMA_PRIMARY;
    public static final UniqueKey<DynamicSchemaRecord> KEY_DYNAMIC_SCHEMA_IDX_DYNAMIC_SCHEMA_UUID = UniqueKeys0.KEY_DYNAMIC_SCHEMA_IDX_DYNAMIC_SCHEMA_UUID;
    public static final UniqueKey<DynamicSchemaRoleRecord> KEY_DYNAMIC_SCHEMA_ROLE_PRIMARY = UniqueKeys0.KEY_DYNAMIC_SCHEMA_ROLE_PRIMARY;
    public static final UniqueKey<ExternalEventRecord> KEY_EXTERNAL_EVENT_PRIMARY = UniqueKeys0.KEY_EXTERNAL_EVENT_PRIMARY;
    public static final UniqueKey<ExternalEventRecord> KEY_EXTERNAL_EVENT_IDX_EXTERNAL_EVENT_UUID = UniqueKeys0.KEY_EXTERNAL_EVENT_IDX_EXTERNAL_EVENT_UUID;
    public static final UniqueKey<GenericObjectRecord> KEY_GENERIC_OBJECT_PRIMARY = UniqueKeys0.KEY_GENERIC_OBJECT_PRIMARY;
    public static final UniqueKey<GenericObjectRecord> KEY_GENERIC_OBJECT_IDX_GENERIC_OBJECT_UUID = UniqueKeys0.KEY_GENERIC_OBJECT_IDX_GENERIC_OBJECT_UUID;
    public static final UniqueKey<HaMembershipRecord> KEY_HA_MEMBERSHIP_PRIMARY = UniqueKeys0.KEY_HA_MEMBERSHIP_PRIMARY;
    public static final UniqueKey<HaMembershipRecord> KEY_HA_MEMBERSHIP_IDX_CLUSTER_MEMBERSHIP_UUID = UniqueKeys0.KEY_HA_MEMBERSHIP_IDX_CLUSTER_MEMBERSHIP_UUID;
    public static final UniqueKey<HostRecord> KEY_HOST_PRIMARY = UniqueKeys0.KEY_HOST_PRIMARY;
    public static final UniqueKey<HostRecord> KEY_HOST_IDX_HOST_UUID = UniqueKeys0.KEY_HOST_IDX_HOST_UUID;
    public static final UniqueKey<HostTemplateRecord> KEY_HOST_TEMPLATE_PRIMARY = UniqueKeys0.KEY_HOST_TEMPLATE_PRIMARY;
    public static final UniqueKey<HostTemplateRecord> KEY_HOST_TEMPLATE_IDX_HOST_TEMPLATE_UUID = UniqueKeys0.KEY_HOST_TEMPLATE_IDX_HOST_TEMPLATE_UUID;
    public static final UniqueKey<InstanceRecord> KEY_INSTANCE_PRIMARY = UniqueKeys0.KEY_INSTANCE_PRIMARY;
    public static final UniqueKey<InstanceRecord> KEY_INSTANCE_IDX_INSTANCE_UUID = UniqueKeys0.KEY_INSTANCE_IDX_INSTANCE_UUID;
    public static final UniqueKey<KeyValueRecord> KEY_KEY_VALUE_UIX_KEY_VALUE_NAME = UniqueKeys0.KEY_KEY_VALUE_UIX_KEY_VALUE_NAME;
    public static final UniqueKey<MachineDriverRecord> KEY_MACHINE_DRIVER_PRIMARY = UniqueKeys0.KEY_MACHINE_DRIVER_PRIMARY;
    public static final UniqueKey<MachineDriverRecord> KEY_MACHINE_DRIVER_IDX_MACHINE_DRIVER_UUID = UniqueKeys0.KEY_MACHINE_DRIVER_IDX_MACHINE_DRIVER_UUID;
    public static final UniqueKey<MountRecord> KEY_MOUNT_PRIMARY = UniqueKeys0.KEY_MOUNT_PRIMARY;
    public static final UniqueKey<MountRecord> KEY_MOUNT_IDX_MOUNT_UUID = UniqueKeys0.KEY_MOUNT_IDX_MOUNT_UUID;
    public static final UniqueKey<NetworkRecord> KEY_NETWORK_PRIMARY = UniqueKeys0.KEY_NETWORK_PRIMARY;
    public static final UniqueKey<NetworkRecord> KEY_NETWORK_IDX_NETWORK_UUID = UniqueKeys0.KEY_NETWORK_IDX_NETWORK_UUID;
    public static final UniqueKey<NetworkDriverRecord> KEY_NETWORK_DRIVER_PRIMARY = UniqueKeys0.KEY_NETWORK_DRIVER_PRIMARY;
    public static final UniqueKey<NetworkDriverRecord> KEY_NETWORK_DRIVER_IDX_NETWORK_DRIVER_UUID = UniqueKeys0.KEY_NETWORK_DRIVER_IDX_NETWORK_DRIVER_UUID;
    public static final UniqueKey<ProcessExecutionRecord> KEY_PROCESS_EXECUTION_PRIMARY = UniqueKeys0.KEY_PROCESS_EXECUTION_PRIMARY;
    public static final UniqueKey<ProcessExecutionRecord> KEY_PROCESS_EXECUTION_IDX_PROCESS_EXECUTION__UUID = UniqueKeys0.KEY_PROCESS_EXECUTION_IDX_PROCESS_EXECUTION__UUID;
    public static final UniqueKey<ProcessInstanceRecord> KEY_PROCESS_INSTANCE_PRIMARY = UniqueKeys0.KEY_PROCESS_INSTANCE_PRIMARY;
    public static final UniqueKey<ProjectMemberRecord> KEY_PROJECT_MEMBER_PRIMARY = UniqueKeys0.KEY_PROJECT_MEMBER_PRIMARY;
    public static final UniqueKey<ProjectMemberRecord> KEY_PROJECT_MEMBER_IDX_PROJECT_MEMBER_UUID = UniqueKeys0.KEY_PROJECT_MEMBER_IDX_PROJECT_MEMBER_UUID;
    public static final UniqueKey<ResourcePoolRecord> KEY_RESOURCE_POOL_PRIMARY = UniqueKeys0.KEY_RESOURCE_POOL_PRIMARY;
    public static final UniqueKey<ResourcePoolRecord> KEY_RESOURCE_POOL_IDX_RESOURCE_POOL_UUID = UniqueKeys0.KEY_RESOURCE_POOL_IDX_RESOURCE_POOL_UUID;
    public static final UniqueKey<ResourcePoolRecord> KEY_RESOURCE_POOL_IDX_POOL_ITEM2 = UniqueKeys0.KEY_RESOURCE_POOL_IDX_POOL_ITEM2;
    public static final UniqueKey<RevisionRecord> KEY_REVISION_PRIMARY = UniqueKeys0.KEY_REVISION_PRIMARY;
    public static final UniqueKey<RevisionRecord> KEY_REVISION_IDX_REVISION_UUID = UniqueKeys0.KEY_REVISION_IDX_REVISION_UUID;
    public static final UniqueKey<ScheduledUpgradeRecord> KEY_SCHEDULED_UPGRADE_PRIMARY = UniqueKeys0.KEY_SCHEDULED_UPGRADE_PRIMARY;
    public static final UniqueKey<ScheduledUpgradeRecord> KEY_SCHEDULED_UPGRADE_IDX_SCHEDULED_UPGRADE_UUID = UniqueKeys0.KEY_SCHEDULED_UPGRADE_IDX_SCHEDULED_UPGRADE_UUID;
    public static final UniqueKey<SecretRecord> KEY_SECRET_PRIMARY = UniqueKeys0.KEY_SECRET_PRIMARY;
    public static final UniqueKey<SecretRecord> KEY_SECRET_IDX_SECRET_UUID = UniqueKeys0.KEY_SECRET_IDX_SECRET_UUID;
    public static final UniqueKey<ServiceRecord> KEY_SERVICE_PRIMARY = UniqueKeys0.KEY_SERVICE_PRIMARY;
    public static final UniqueKey<ServiceRecord> KEY_SERVICE_IDX_SERVICE_UUID = UniqueKeys0.KEY_SERVICE_IDX_SERVICE_UUID;
    public static final UniqueKey<ServiceEventRecord> KEY_SERVICE_EVENT_PRIMARY = UniqueKeys0.KEY_SERVICE_EVENT_PRIMARY;
    public static final UniqueKey<ServiceEventRecord> KEY_SERVICE_EVENT_IDX_SERVICE_EVENT_UUID = UniqueKeys0.KEY_SERVICE_EVENT_IDX_SERVICE_EVENT_UUID;
    public static final UniqueKey<ServiceLogRecord> KEY_SERVICE_LOG_PRIMARY = UniqueKeys0.KEY_SERVICE_LOG_PRIMARY;
    public static final UniqueKey<SettingRecord> KEY_SETTING_PRIMARY = UniqueKeys0.KEY_SETTING_PRIMARY;
    public static final UniqueKey<StackRecord> KEY_STACK_PRIMARY = UniqueKeys0.KEY_STACK_PRIMARY;
    public static final UniqueKey<StackRecord> KEY_STACK_IDX_ENVIRONMENT_UUID = UniqueKeys0.KEY_STACK_IDX_ENVIRONMENT_UUID;
    public static final UniqueKey<StorageDriverRecord> KEY_STORAGE_DRIVER_PRIMARY = UniqueKeys0.KEY_STORAGE_DRIVER_PRIMARY;
    public static final UniqueKey<StorageDriverRecord> KEY_STORAGE_DRIVER_IDX_STORAGE_DRIVER_UUID = UniqueKeys0.KEY_STORAGE_DRIVER_IDX_STORAGE_DRIVER_UUID;
    public static final UniqueKey<StoragePoolRecord> KEY_STORAGE_POOL_PRIMARY = UniqueKeys0.KEY_STORAGE_POOL_PRIMARY;
    public static final UniqueKey<StoragePoolRecord> KEY_STORAGE_POOL_IDX_STORAGE_POOL_UUID = UniqueKeys0.KEY_STORAGE_POOL_IDX_STORAGE_POOL_UUID;
    public static final UniqueKey<StoragePoolHostMapRecord> KEY_STORAGE_POOL_HOST_MAP_PRIMARY = UniqueKeys0.KEY_STORAGE_POOL_HOST_MAP_PRIMARY;
    public static final UniqueKey<StoragePoolHostMapRecord> KEY_STORAGE_POOL_HOST_MAP_IDX_STORAGE_POOL_HOST_MAP_UUID = UniqueKeys0.KEY_STORAGE_POOL_HOST_MAP_IDX_STORAGE_POOL_HOST_MAP_UUID;
    public static final UniqueKey<SubnetRecord> KEY_SUBNET_PRIMARY = UniqueKeys0.KEY_SUBNET_PRIMARY;
    public static final UniqueKey<SubnetRecord> KEY_SUBNET_IDX_SUBNET_UUID = UniqueKeys0.KEY_SUBNET_IDX_SUBNET_UUID;
    public static final UniqueKey<UserPreferenceRecord> KEY_USER_PREFERENCE_PRIMARY = UniqueKeys0.KEY_USER_PREFERENCE_PRIMARY;
    public static final UniqueKey<UserPreferenceRecord> KEY_USER_PREFERENCE_IDX_USER_PREFERENCE_UUID = UniqueKeys0.KEY_USER_PREFERENCE_IDX_USER_PREFERENCE_UUID;
    public static final UniqueKey<VolumeRecord> KEY_VOLUME_PRIMARY = UniqueKeys0.KEY_VOLUME_PRIMARY;
    public static final UniqueKey<VolumeRecord> KEY_VOLUME_IDX_VOLUME_UUID = UniqueKeys0.KEY_VOLUME_IDX_VOLUME_UUID;
    public static final UniqueKey<VolumeStoragePoolMapRecord> KEY_VOLUME_STORAGE_POOL_MAP_PRIMARY = UniqueKeys0.KEY_VOLUME_STORAGE_POOL_MAP_PRIMARY;
    public static final UniqueKey<VolumeStoragePoolMapRecord> KEY_VOLUME_STORAGE_POOL_MAP_IDX_VOLUME_STORAGE_POOL_MAP_UUID = UniqueKeys0.KEY_VOLUME_STORAGE_POOL_MAP_IDX_VOLUME_STORAGE_POOL_MAP_UUID;
    public static final UniqueKey<VolumeTemplateRecord> KEY_VOLUME_TEMPLATE_PRIMARY = UniqueKeys0.KEY_VOLUME_TEMPLATE_PRIMARY;
    public static final UniqueKey<VolumeTemplateRecord> KEY_VOLUME_TEMPLATE_IDX_VOLUME_TEMPLATE_UUID = UniqueKeys0.KEY_VOLUME_TEMPLATE_IDX_VOLUME_TEMPLATE_UUID;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, ClusterRecord> FK_ACCOUNT__CLUSTER_ID = ForeignKeys0.FK_ACCOUNT__CLUSTER_ID;
    public static final ForeignKey<AgentRecord, AccountRecord> FK_AGENT__ACCOUNT_ID = ForeignKeys0.FK_AGENT__ACCOUNT_ID;
    public static final ForeignKey<AgentRecord, AccountRecord> FK_AGENT__RESOURCE_ACCOUNT_ID = ForeignKeys0.FK_AGENT__RESOURCE_ACCOUNT_ID;
    public static final ForeignKey<AgentRecord, ClusterRecord> FK_AGENT__CLUSTER_ID = ForeignKeys0.FK_AGENT__CLUSTER_ID;
    public static final ForeignKey<AuditLogRecord, AccountRecord> FK_AUDIT_LOG__ACCOUNT_ID = ForeignKeys0.FK_AUDIT_LOG__ACCOUNT_ID;
    public static final ForeignKey<AuditLogRecord, AccountRecord> FK_AUDIT_LOG__AUTHENTICATED_AS_ACCOUNT_ID = ForeignKeys0.FK_AUDIT_LOG__AUTHENTICATED_AS_ACCOUNT_ID;
    public static final ForeignKey<AuthTokenRecord, AccountRecord> FK_AUTH_TOKEN__ACCOUNT_ID = ForeignKeys0.FK_AUTH_TOKEN__ACCOUNT_ID;
    public static final ForeignKey<AuthTokenRecord, AccountRecord> AUTH_TOKEN_IBFK_1 = ForeignKeys0.AUTH_TOKEN_IBFK_1;
    public static final ForeignKey<CertificateRecord, AccountRecord> FK_CERT_DATA__ACCOUNT_ID = ForeignKeys0.FK_CERT_DATA__ACCOUNT_ID;
    public static final ForeignKey<CertificateRecord, AccountRecord> FK_CERTIFICATE__CREATOR_ID = ForeignKeys0.FK_CERTIFICATE__CREATOR_ID;
    public static final ForeignKey<ClusterRecord, AccountRecord> FK_CLUSTER__CREATOR_ID = ForeignKeys0.FK_CLUSTER__CREATOR_ID;
    public static final ForeignKey<ClusterRecord, NetworkRecord> FK_CLUSTER__NETWORK_ID = ForeignKeys0.FK_CLUSTER__NETWORK_ID;
    public static final ForeignKey<CredentialRecord, AccountRecord> FK_CREDENTIAL__ACCOUNT_ID = ForeignKeys0.FK_CREDENTIAL__ACCOUNT_ID;
    public static final ForeignKey<CredentialRecord, StoragePoolRecord> FK_CREDENTIAL__REGISTRY_ID = ForeignKeys0.FK_CREDENTIAL__REGISTRY_ID;
    public static final ForeignKey<DeploymentUnitRecord, AccountRecord> FK_DEPLOYMENT_UNIT__ACCOUNT_ID = ForeignKeys0.FK_DEPLOYMENT_UNIT__ACCOUNT_ID;
    public static final ForeignKey<DeploymentUnitRecord, ServiceRecord> FK_DEPLOYMENT_UNIT__SERVICE_ID = ForeignKeys0.FK_DEPLOYMENT_UNIT__SERVICE_ID;
    public static final ForeignKey<DeploymentUnitRecord, StackRecord> FK_DEPLOYMENT_UNIT__ENVIRONMENT_ID = ForeignKeys0.FK_DEPLOYMENT_UNIT__ENVIRONMENT_ID;
    public static final ForeignKey<DeploymentUnitRecord, HostRecord> FK_DEPLOYMENT_UNIT__HOST_ID = ForeignKeys0.FK_DEPLOYMENT_UNIT__HOST_ID;
    public static final ForeignKey<DeploymentUnitRecord, RevisionRecord> FK_DEPLOYMENT_UNIT_REQUESTED_REVISION_ID = ForeignKeys0.FK_DEPLOYMENT_UNIT_REQUESTED_REVISION_ID;
    public static final ForeignKey<DeploymentUnitRecord, RevisionRecord> FK_DEPLOYMENT_UNIT__REVISION_ID = ForeignKeys0.FK_DEPLOYMENT_UNIT__REVISION_ID;
    public static final ForeignKey<DeploymentUnitRecord, ClusterRecord> FK_DEPLOYMENT_UNIT__CLUSTER_ID = ForeignKeys0.FK_DEPLOYMENT_UNIT__CLUSTER_ID;
    public static final ForeignKey<DynamicSchemaRecord, AccountRecord> FK_DYNAMIC_SCHEMA__ACCOUNT_ID = ForeignKeys0.FK_DYNAMIC_SCHEMA__ACCOUNT_ID;
    public static final ForeignKey<DynamicSchemaRecord, ServiceRecord> FK_DYNAMIC_SCHEMA__SERVICE_ID = ForeignKeys0.FK_DYNAMIC_SCHEMA__SERVICE_ID;
    public static final ForeignKey<DynamicSchemaRecord, AccountRecord> FK_DYNAMIC_SCHEMA__CREATOR_ID = ForeignKeys0.FK_DYNAMIC_SCHEMA__CREATOR_ID;
    public static final ForeignKey<DynamicSchemaRoleRecord, DynamicSchemaRecord> FK_DYNAMIC_SCHEMA_ROLE_DYNAMIC_SCHEMA_ID = ForeignKeys0.FK_DYNAMIC_SCHEMA_ROLE_DYNAMIC_SCHEMA_ID;
    public static final ForeignKey<ExternalEventRecord, AccountRecord> FK_EXTERNAL_EVENT__ACCOUNT_ID = ForeignKeys0.FK_EXTERNAL_EVENT__ACCOUNT_ID;
    public static final ForeignKey<ExternalEventRecord, AccountRecord> FK_EXTERNAL_EVENT__REPORTED_ACCOUNT_ID = ForeignKeys0.FK_EXTERNAL_EVENT__REPORTED_ACCOUNT_ID;
    public static final ForeignKey<ExternalEventRecord, AccountRecord> FK_EXTERNAL_EVENT__CREATOR_ID = ForeignKeys0.FK_EXTERNAL_EVENT__CREATOR_ID;
    public static final ForeignKey<ExternalEventRecord, ClusterRecord> FK_EXTERNAL_EVENT__CLUSTER_ID = ForeignKeys0.FK_EXTERNAL_EVENT__CLUSTER_ID;
    public static final ForeignKey<GenericObjectRecord, AccountRecord> FK_GENERIC_OBJECT__ACCOUNT_ID = ForeignKeys0.FK_GENERIC_OBJECT__ACCOUNT_ID;
    public static final ForeignKey<GenericObjectRecord, AccountRecord> FK_GENERIC_OBJECT__CREATOR_ID = ForeignKeys0.FK_GENERIC_OBJECT__CREATOR_ID;
    public static final ForeignKey<GenericObjectRecord, ClusterRecord> FK_GENERIC_OBJECT__CLUSTER_ID = ForeignKeys0.FK_GENERIC_OBJECT__CLUSTER_ID;
    public static final ForeignKey<HostRecord, AgentRecord> FK_HOST__AGENT_ID = ForeignKeys0.FK_HOST__AGENT_ID;
    public static final ForeignKey<HostRecord, StackRecord> FK_HOST__ENVIRONMENT_ID = ForeignKeys0.FK_HOST__ENVIRONMENT_ID;
    public static final ForeignKey<HostRecord, HostTemplateRecord> FK_HOST__HOST_TEMPLATE_ID = ForeignKeys0.FK_HOST__HOST_TEMPLATE_ID;
    public static final ForeignKey<HostRecord, ClusterRecord> FK_HOST__CLUSTER_ID = ForeignKeys0.FK_HOST__CLUSTER_ID;
    public static final ForeignKey<HostRecord, AccountRecord> FK_HOST__CREATOR_ID = ForeignKeys0.FK_HOST__CREATOR_ID;
    public static final ForeignKey<HostTemplateRecord, ClusterRecord> FK_HOST_TEMPLATE__CLUSTER_ID = ForeignKeys0.FK_HOST_TEMPLATE__CLUSTER_ID;
    public static final ForeignKey<HostTemplateRecord, AccountRecord> FK_HOST_TEMPLATE__CREATOR_ID = ForeignKeys0.FK_HOST_TEMPLATE__CREATOR_ID;
    public static final ForeignKey<InstanceRecord, AccountRecord> FK_INSTANCE__ACCOUNT_ID = ForeignKeys0.FK_INSTANCE__ACCOUNT_ID;
    public static final ForeignKey<InstanceRecord, AgentRecord> FK_INSTANCE__AGENT_ID = ForeignKeys0.FK_INSTANCE__AGENT_ID;
    public static final ForeignKey<InstanceRecord, CredentialRecord> FK_INSTANCE__REGISTRY_CREDENTIAL_ID = ForeignKeys0.FK_INSTANCE__REGISTRY_CREDENTIAL_ID;
    public static final ForeignKey<InstanceRecord, InstanceRecord> FK_INSTANCE__INSTANCE_ID = ForeignKeys0.FK_INSTANCE__INSTANCE_ID;
    public static final ForeignKey<InstanceRecord, ServiceRecord> FK_INSTANCE__SERVICE_ID = ForeignKeys0.FK_INSTANCE__SERVICE_ID;
    public static final ForeignKey<InstanceRecord, StackRecord> FK_INSTANCE__ENVIRONMENT_ID = ForeignKeys0.FK_INSTANCE__ENVIRONMENT_ID;
    public static final ForeignKey<InstanceRecord, DeploymentUnitRecord> FK_INSTANCE__DEPLOYMENT_UNIT_ID = ForeignKeys0.FK_INSTANCE__DEPLOYMENT_UNIT_ID;
    public static final ForeignKey<InstanceRecord, RevisionRecord> FK_INSTANCE__REVISION_ID = ForeignKeys0.FK_INSTANCE__REVISION_ID;
    public static final ForeignKey<InstanceRecord, HostRecord> FK_INSTANCE__HOST_ID = ForeignKeys0.FK_INSTANCE__HOST_ID;
    public static final ForeignKey<InstanceRecord, NetworkRecord> FK_INSTANCE__NETWORK_ID = ForeignKeys0.FK_INSTANCE__NETWORK_ID;
    public static final ForeignKey<InstanceRecord, ClusterRecord> FK_INSTANCE__CLUSTER_ID = ForeignKeys0.FK_INSTANCE__CLUSTER_ID;
    public static final ForeignKey<InstanceRecord, AccountRecord> FK_INSTANCE__CREATOR_ID = ForeignKeys0.FK_INSTANCE__CREATOR_ID;
    public static final ForeignKey<MachineDriverRecord, AccountRecord> FK_MACHINE_DRIVER__CREATOR_ID = ForeignKeys0.FK_MACHINE_DRIVER__CREATOR_ID;
    public static final ForeignKey<MountRecord, AccountRecord> FK_MOUNT__ACCOUNT_ID = ForeignKeys0.FK_MOUNT__ACCOUNT_ID;
    public static final ForeignKey<MountRecord, VolumeRecord> FK_MOUNT__VOLUME_ID = ForeignKeys0.FK_MOUNT__VOLUME_ID;
    public static final ForeignKey<MountRecord, InstanceRecord> FK_MOUNT__INSTANCE_ID = ForeignKeys0.FK_MOUNT__INSTANCE_ID;
    public static final ForeignKey<NetworkRecord, NetworkDriverRecord> FK_NETWORK__NETWORK_DRIVER_ID = ForeignKeys0.FK_NETWORK__NETWORK_DRIVER_ID;
    public static final ForeignKey<NetworkRecord, ClusterRecord> FK_NETWORK__CLUSTER_ID = ForeignKeys0.FK_NETWORK__CLUSTER_ID;
    public static final ForeignKey<NetworkDriverRecord, ServiceRecord> FK_NETWORK_DRIVER__SERVICE_ID = ForeignKeys0.FK_NETWORK_DRIVER__SERVICE_ID;
    public static final ForeignKey<NetworkDriverRecord, ClusterRecord> FK_NETWORK_DRIVER__CLUSTER_ID = ForeignKeys0.FK_NETWORK_DRIVER__CLUSTER_ID;
    public static final ForeignKey<ProcessExecutionRecord, ProcessInstanceRecord> FK_PROCESS_EXECUTION_PROCESS_INSTANCE_ID = ForeignKeys0.FK_PROCESS_EXECUTION_PROCESS_INSTANCE_ID;
    public static final ForeignKey<ProcessInstanceRecord, AccountRecord> FK_PROCESS_INSTANCE__ACCOUNT_ID = ForeignKeys0.FK_PROCESS_INSTANCE__ACCOUNT_ID;
    public static final ForeignKey<ProcessInstanceRecord, ClusterRecord> FK_PROCESS_INSTANCE__CLUSTER_ID = ForeignKeys0.FK_PROCESS_INSTANCE__CLUSTER_ID;
    public static final ForeignKey<ProjectMemberRecord, AccountRecord> FK_PROJECT_MEMBER__ACCOUNT_ID = ForeignKeys0.FK_PROJECT_MEMBER__ACCOUNT_ID;
    public static final ForeignKey<ProjectMemberRecord, AccountRecord> FK_PROJECT_MEMBER__PROJECT_ID = ForeignKeys0.FK_PROJECT_MEMBER__PROJECT_ID;
    public static final ForeignKey<ResourcePoolRecord, AccountRecord> FK_RESOURCE_POOL__ACCOUNT_ID = ForeignKeys0.FK_RESOURCE_POOL__ACCOUNT_ID;
    public static final ForeignKey<RevisionRecord, AccountRecord> FK_REVISION__ACCOUNT_ID = ForeignKeys0.FK_REVISION__ACCOUNT_ID;
    public static final ForeignKey<RevisionRecord, ServiceRecord> FK_REVISION__SERVICE_ID = ForeignKeys0.FK_REVISION__SERVICE_ID;
    public static final ForeignKey<RevisionRecord, AccountRecord> FK_REVISION__CREATOR_ID = ForeignKeys0.FK_REVISION__CREATOR_ID;
    public static final ForeignKey<ScheduledUpgradeRecord, AccountRecord> FK_SCHEDULED_UPGRADE__ACCOUNT_ID = ForeignKeys0.FK_SCHEDULED_UPGRADE__ACCOUNT_ID;
    public static final ForeignKey<ScheduledUpgradeRecord, StackRecord> FK_SCHEDULED_UPGRADE__ENVIRONMENT_ID = ForeignKeys0.FK_SCHEDULED_UPGRADE__ENVIRONMENT_ID;
    public static final ForeignKey<SecretRecord, AccountRecord> FK_SECRET__ACCOUNT_ID = ForeignKeys0.FK_SECRET__ACCOUNT_ID;
    public static final ForeignKey<SecretRecord, StackRecord> FK_SECRET__ENVIRONMENT_ID = ForeignKeys0.FK_SECRET__ENVIRONMENT_ID;
    public static final ForeignKey<SecretRecord, AccountRecord> FK_SECRET__CREATOR_ID = ForeignKeys0.FK_SECRET__CREATOR_ID;
    public static final ForeignKey<ServiceRecord, AccountRecord> FK_SERVICE__ACCOUNT_ID = ForeignKeys0.FK_SERVICE__ACCOUNT_ID;
    public static final ForeignKey<ServiceRecord, StackRecord> FK_SERVICE__ENVIRONMENT_ID = ForeignKeys0.FK_SERVICE__ENVIRONMENT_ID;
    public static final ForeignKey<ServiceRecord, RevisionRecord> FK_SERVICE__PREVIOUS_REVISION_ID = ForeignKeys0.FK_SERVICE__PREVIOUS_REVISION_ID;
    public static final ForeignKey<ServiceRecord, RevisionRecord> FK_SERVICE__REVISION_ID = ForeignKeys0.FK_SERVICE__REVISION_ID;
    public static final ForeignKey<ServiceRecord, ClusterRecord> FK_SERVICE_CLUSTER_ID = ForeignKeys0.FK_SERVICE_CLUSTER_ID;
    public static final ForeignKey<ServiceRecord, AccountRecord> FK_SERVICE__CREATOR_ID = ForeignKeys0.FK_SERVICE__CREATOR_ID;
    public static final ForeignKey<ServiceEventRecord, AccountRecord> FK_SERVICE_EVENT__ACCOUNT_ID = ForeignKeys0.FK_SERVICE_EVENT__ACCOUNT_ID;
    public static final ForeignKey<ServiceEventRecord, HostRecord> FK_SERVICE_EVENT__HOST_ID = ForeignKeys0.FK_SERVICE_EVENT__HOST_ID;
    public static final ForeignKey<ServiceEventRecord, InstanceRecord> FK_SERVICE_EVENT__INSTANCE_ID = ForeignKeys0.FK_SERVICE_EVENT__INSTANCE_ID;
    public static final ForeignKey<ServiceEventRecord, AccountRecord> FK_SERVICE_EVENT__CREATOR_ID = ForeignKeys0.FK_SERVICE_EVENT__CREATOR_ID;
    public static final ForeignKey<ServiceLogRecord, AccountRecord> FK_SERVICE_LOG__ACCOUNT_ID = ForeignKeys0.FK_SERVICE_LOG__ACCOUNT_ID;
    public static final ForeignKey<ServiceLogRecord, ServiceRecord> FK_SERVICE_LOG__SERVICE_ID = ForeignKeys0.FK_SERVICE_LOG__SERVICE_ID;
    public static final ForeignKey<ServiceLogRecord, InstanceRecord> FK_SERVICE_LOG__INSTANCE_ID = ForeignKeys0.FK_SERVICE_LOG__INSTANCE_ID;
    public static final ForeignKey<ServiceLogRecord, DeploymentUnitRecord> FK_SERVICE_LOG__DEPLOYMENT_UNIT_ID = ForeignKeys0.FK_SERVICE_LOG__DEPLOYMENT_UNIT_ID;
    public static final ForeignKey<StackRecord, AccountRecord> FK_ENVIRONMENT__ACCOUNT_ID = ForeignKeys0.FK_ENVIRONMENT__ACCOUNT_ID;
    public static final ForeignKey<StackRecord, StackRecord> FK_ENVIRONMENT_ENVIRONMENT_ID = ForeignKeys0.FK_ENVIRONMENT_ENVIRONMENT_ID;
    public static final ForeignKey<StackRecord, ClusterRecord> FK_STACK__CLUSTER_ID = ForeignKeys0.FK_STACK__CLUSTER_ID;
    public static final ForeignKey<StackRecord, AccountRecord> FK_STACK__CREATOR_ID = ForeignKeys0.FK_STACK__CREATOR_ID;
    public static final ForeignKey<StorageDriverRecord, ServiceRecord> FK_STORAGE_DRIVER__SERVICE_ID = ForeignKeys0.FK_STORAGE_DRIVER__SERVICE_ID;
    public static final ForeignKey<StorageDriverRecord, ClusterRecord> FK_STORAGE_DRIVER__CLUSTER_ID = ForeignKeys0.FK_STORAGE_DRIVER__CLUSTER_ID;
    public static final ForeignKey<StoragePoolRecord, AgentRecord> FK_STORAGE_POOL__AGENT_ID = ForeignKeys0.FK_STORAGE_POOL__AGENT_ID;
    public static final ForeignKey<StoragePoolRecord, StorageDriverRecord> FK_STORAGE_DRIVER__ID = ForeignKeys0.FK_STORAGE_DRIVER__ID;
    public static final ForeignKey<StoragePoolRecord, ClusterRecord> FK_STORAGE_POOL__CLUSTER_ID = ForeignKeys0.FK_STORAGE_POOL__CLUSTER_ID;
    public static final ForeignKey<StoragePoolHostMapRecord, StoragePoolRecord> FK_STORAGE_POOL_HOST_MAP__STORAGE_POOL_ID = ForeignKeys0.FK_STORAGE_POOL_HOST_MAP__STORAGE_POOL_ID;
    public static final ForeignKey<StoragePoolHostMapRecord, HostRecord> FK_STORAGE_POOL_HOST_MAP__HOST_ID = ForeignKeys0.FK_STORAGE_POOL_HOST_MAP__HOST_ID;
    public static final ForeignKey<SubnetRecord, NetworkRecord> FK_SUBNET__NETWORK_ID = ForeignKeys0.FK_SUBNET__NETWORK_ID;
    public static final ForeignKey<SubnetRecord, ClusterRecord> FK_SUBNET__CLUSTER_ID = ForeignKeys0.FK_SUBNET__CLUSTER_ID;
    public static final ForeignKey<UserPreferenceRecord, AccountRecord> FK_USER_PREFERENCE__ACCOUNT_ID = ForeignKeys0.FK_USER_PREFERENCE__ACCOUNT_ID;
    public static final ForeignKey<VolumeRecord, AccountRecord> FK_VOLUME__ACCOUNT_ID = ForeignKeys0.FK_VOLUME__ACCOUNT_ID;
    public static final ForeignKey<VolumeRecord, HostRecord> FK_VOLUME__HOST_ID = ForeignKeys0.FK_VOLUME__HOST_ID;
    public static final ForeignKey<VolumeRecord, DeploymentUnitRecord> FK_VOLUME__DEPLOYMENT_UNIT_ID = ForeignKeys0.FK_VOLUME__DEPLOYMENT_UNIT_ID;
    public static final ForeignKey<VolumeRecord, StackRecord> FK_VOLUME__ENVIRONMENT_ID = ForeignKeys0.FK_VOLUME__ENVIRONMENT_ID;
    public static final ForeignKey<VolumeRecord, VolumeTemplateRecord> FK_VOLUME__VOLUME_TEMPLATE_ID = ForeignKeys0.FK_VOLUME__VOLUME_TEMPLATE_ID;
    public static final ForeignKey<VolumeRecord, StorageDriverRecord> FK_VOLUME__STORAGE_DRIVER_ID = ForeignKeys0.FK_VOLUME__STORAGE_DRIVER_ID;
    public static final ForeignKey<VolumeRecord, StoragePoolRecord> FK_VOLUME__STORAGE_POOL_ID = ForeignKeys0.FK_VOLUME__STORAGE_POOL_ID;
    public static final ForeignKey<VolumeRecord, ClusterRecord> FK_VOLUME__CLUSTER_ID = ForeignKeys0.FK_VOLUME__CLUSTER_ID;
    public static final ForeignKey<VolumeRecord, AccountRecord> FK_VOLUME__CREATOR_ID = ForeignKeys0.FK_VOLUME__CREATOR_ID;
    public static final ForeignKey<VolumeStoragePoolMapRecord, VolumeRecord> FK_VOLUME_STORAGE_POOL_MAP__VOLUME_ID = ForeignKeys0.FK_VOLUME_STORAGE_POOL_MAP__VOLUME_ID;
    public static final ForeignKey<VolumeStoragePoolMapRecord, StoragePoolRecord> FK_VOLUME_STORAGE_POOL_MAP__STORAGE_POOL_ID = ForeignKeys0.FK_VOLUME_STORAGE_POOL_MAP__STORAGE_POOL_ID;
    public static final ForeignKey<VolumeTemplateRecord, AccountRecord> FK_VOLUME_TEMPLATE__ACCOUNT_ID = ForeignKeys0.FK_VOLUME_TEMPLATE__ACCOUNT_ID;
    public static final ForeignKey<VolumeTemplateRecord, StackRecord> FK_VOLUME_TEMPLATE__ENVIRONMENT_ID = ForeignKeys0.FK_VOLUME_TEMPLATE__ENVIRONMENT_ID;
    public static final ForeignKey<VolumeTemplateRecord, ClusterRecord> FK_VOLUME_TEMPLATE__CLUSTER_ID = ForeignKeys0.FK_VOLUME_TEMPLATE__CLUSTER_ID;
    public static final ForeignKey<VolumeTemplateRecord, AccountRecord> FK_VOLUME_TEMPLATE__CREATOR_ID = ForeignKeys0.FK_VOLUME_TEMPLATE__CREATOR_ID;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<AccountRecord, Long> IDENTITY_ACCOUNT = createIdentity(AccountTable.ACCOUNT, AccountTable.ACCOUNT.ID);
        public static Identity<AgentRecord, Long> IDENTITY_AGENT = createIdentity(AgentTable.AGENT, AgentTable.AGENT.ID);
        public static Identity<AuditLogRecord, Long> IDENTITY_AUDIT_LOG = createIdentity(AuditLogTable.AUDIT_LOG, AuditLogTable.AUDIT_LOG.ID);
        public static Identity<AuthTokenRecord, Long> IDENTITY_AUTH_TOKEN = createIdentity(AuthTokenTable.AUTH_TOKEN, AuthTokenTable.AUTH_TOKEN.ID);
        public static Identity<CertificateRecord, Long> IDENTITY_CERTIFICATE = createIdentity(CertificateTable.CERTIFICATE, CertificateTable.CERTIFICATE.ID);
        public static Identity<ClusterRecord, Long> IDENTITY_CLUSTER = createIdentity(ClusterTable.CLUSTER, ClusterTable.CLUSTER.ID);
        public static Identity<CredentialRecord, Long> IDENTITY_CREDENTIAL = createIdentity(CredentialTable.CREDENTIAL, CredentialTable.CREDENTIAL.ID);
        public static Identity<DataRecord, Long> IDENTITY_DATA = createIdentity(DataTable.DATA, DataTable.DATA.ID);
        public static Identity<DeploymentUnitRecord, Long> IDENTITY_DEPLOYMENT_UNIT = createIdentity(DeploymentUnitTable.DEPLOYMENT_UNIT, DeploymentUnitTable.DEPLOYMENT_UNIT.ID);
        public static Identity<DynamicSchemaRecord, Long> IDENTITY_DYNAMIC_SCHEMA = createIdentity(DynamicSchemaTable.DYNAMIC_SCHEMA, DynamicSchemaTable.DYNAMIC_SCHEMA.ID);
        public static Identity<DynamicSchemaRoleRecord, Long> IDENTITY_DYNAMIC_SCHEMA_ROLE = createIdentity(DynamicSchemaRoleTable.DYNAMIC_SCHEMA_ROLE, DynamicSchemaRoleTable.DYNAMIC_SCHEMA_ROLE.ID);
        public static Identity<ExternalEventRecord, Long> IDENTITY_EXTERNAL_EVENT = createIdentity(ExternalEventTable.EXTERNAL_EVENT, ExternalEventTable.EXTERNAL_EVENT.ID);
        public static Identity<GenericObjectRecord, Long> IDENTITY_GENERIC_OBJECT = createIdentity(GenericObjectTable.GENERIC_OBJECT, GenericObjectTable.GENERIC_OBJECT.ID);
        public static Identity<HaMembershipRecord, Long> IDENTITY_HA_MEMBERSHIP = createIdentity(HaMembershipTable.HA_MEMBERSHIP, HaMembershipTable.HA_MEMBERSHIP.ID);
        public static Identity<HostRecord, Long> IDENTITY_HOST = createIdentity(HostTable.HOST, HostTable.HOST.ID);
        public static Identity<HostTemplateRecord, Long> IDENTITY_HOST_TEMPLATE = createIdentity(HostTemplateTable.HOST_TEMPLATE, HostTemplateTable.HOST_TEMPLATE.ID);
        public static Identity<InstanceRecord, Long> IDENTITY_INSTANCE = createIdentity(InstanceTable.INSTANCE, InstanceTable.INSTANCE.ID);
        public static Identity<MachineDriverRecord, Long> IDENTITY_MACHINE_DRIVER = createIdentity(MachineDriverTable.MACHINE_DRIVER, MachineDriverTable.MACHINE_DRIVER.ID);
        public static Identity<MountRecord, Long> IDENTITY_MOUNT = createIdentity(MountTable.MOUNT, MountTable.MOUNT.ID);
        public static Identity<NetworkRecord, Long> IDENTITY_NETWORK = createIdentity(NetworkTable.NETWORK, NetworkTable.NETWORK.ID);
        public static Identity<NetworkDriverRecord, Long> IDENTITY_NETWORK_DRIVER = createIdentity(NetworkDriverTable.NETWORK_DRIVER, NetworkDriverTable.NETWORK_DRIVER.ID);
        public static Identity<ProcessExecutionRecord, Long> IDENTITY_PROCESS_EXECUTION = createIdentity(ProcessExecutionTable.PROCESS_EXECUTION, ProcessExecutionTable.PROCESS_EXECUTION.ID);
        public static Identity<ProcessInstanceRecord, Long> IDENTITY_PROCESS_INSTANCE = createIdentity(ProcessInstanceTable.PROCESS_INSTANCE, ProcessInstanceTable.PROCESS_INSTANCE.ID);
        public static Identity<ProjectMemberRecord, Long> IDENTITY_PROJECT_MEMBER = createIdentity(ProjectMemberTable.PROJECT_MEMBER, ProjectMemberTable.PROJECT_MEMBER.ID);
        public static Identity<ResourcePoolRecord, Long> IDENTITY_RESOURCE_POOL = createIdentity(ResourcePoolTable.RESOURCE_POOL, ResourcePoolTable.RESOURCE_POOL.ID);
        public static Identity<RevisionRecord, Long> IDENTITY_REVISION = createIdentity(RevisionTable.REVISION, RevisionTable.REVISION.ID);
        public static Identity<ScheduledUpgradeRecord, Long> IDENTITY_SCHEDULED_UPGRADE = createIdentity(ScheduledUpgradeTable.SCHEDULED_UPGRADE, ScheduledUpgradeTable.SCHEDULED_UPGRADE.ID);
        public static Identity<SecretRecord, Long> IDENTITY_SECRET = createIdentity(SecretTable.SECRET, SecretTable.SECRET.ID);
        public static Identity<ServiceRecord, Long> IDENTITY_SERVICE = createIdentity(ServiceTable.SERVICE, ServiceTable.SERVICE.ID);
        public static Identity<ServiceEventRecord, Long> IDENTITY_SERVICE_EVENT = createIdentity(ServiceEventTable.SERVICE_EVENT, ServiceEventTable.SERVICE_EVENT.ID);
        public static Identity<ServiceLogRecord, Long> IDENTITY_SERVICE_LOG = createIdentity(ServiceLogTable.SERVICE_LOG, ServiceLogTable.SERVICE_LOG.ID);
        public static Identity<SettingRecord, Long> IDENTITY_SETTING = createIdentity(SettingTable.SETTING, SettingTable.SETTING.ID);
        public static Identity<StackRecord, Long> IDENTITY_STACK = createIdentity(StackTable.STACK, StackTable.STACK.ID);
        public static Identity<StorageDriverRecord, Long> IDENTITY_STORAGE_DRIVER = createIdentity(StorageDriverTable.STORAGE_DRIVER, StorageDriverTable.STORAGE_DRIVER.ID);
        public static Identity<StoragePoolRecord, Long> IDENTITY_STORAGE_POOL = createIdentity(StoragePoolTable.STORAGE_POOL, StoragePoolTable.STORAGE_POOL.ID);
        public static Identity<StoragePoolHostMapRecord, Long> IDENTITY_STORAGE_POOL_HOST_MAP = createIdentity(StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP, StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP.ID);
        public static Identity<SubnetRecord, Long> IDENTITY_SUBNET = createIdentity(SubnetTable.SUBNET, SubnetTable.SUBNET.ID);
        public static Identity<UserPreferenceRecord, Long> IDENTITY_USER_PREFERENCE = createIdentity(UserPreferenceTable.USER_PREFERENCE, UserPreferenceTable.USER_PREFERENCE.ID);
        public static Identity<VolumeRecord, Long> IDENTITY_VOLUME = createIdentity(VolumeTable.VOLUME, VolumeTable.VOLUME.ID);
        public static Identity<VolumeStoragePoolMapRecord, Long> IDENTITY_VOLUME_STORAGE_POOL_MAP = createIdentity(VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP, VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP.ID);
        public static Identity<VolumeTemplateRecord, Long> IDENTITY_VOLUME_TEMPLATE = createIdentity(VolumeTemplateTable.VOLUME_TEMPLATE, VolumeTemplateTable.VOLUME_TEMPLATE.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<AccountRecord> KEY_ACCOUNT_PRIMARY = createUniqueKey(AccountTable.ACCOUNT, "KEY_account_PRIMARY", AccountTable.ACCOUNT.ID);
        public static final UniqueKey<AccountRecord> KEY_ACCOUNT_IDX_ACCOUNT_UUID = createUniqueKey(AccountTable.ACCOUNT, "KEY_account_idx_account_uuid", AccountTable.ACCOUNT.UUID);
        public static final UniqueKey<AgentRecord> KEY_AGENT_PRIMARY = createUniqueKey(AgentTable.AGENT, "KEY_agent_PRIMARY", AgentTable.AGENT.ID);
        public static final UniqueKey<AgentRecord> KEY_AGENT_IDX_AGENT_UUID = createUniqueKey(AgentTable.AGENT, "KEY_agent_idx_agent_uuid", AgentTable.AGENT.UUID);
        public static final UniqueKey<AuditLogRecord> KEY_AUDIT_LOG_PRIMARY = createUniqueKey(AuditLogTable.AUDIT_LOG, "KEY_audit_log_PRIMARY", AuditLogTable.AUDIT_LOG.ID);
        public static final UniqueKey<AuthTokenRecord> KEY_AUTH_TOKEN_PRIMARY = createUniqueKey(AuthTokenTable.AUTH_TOKEN, "KEY_auth_token_PRIMARY", AuthTokenTable.AUTH_TOKEN.ID);
        public static final UniqueKey<AuthTokenRecord> KEY_AUTH_TOKEN_IDX_AUTH_TOKEN_KEY = createUniqueKey(AuthTokenTable.AUTH_TOKEN, "KEY_auth_token_idx_auth_token_key", AuthTokenTable.AUTH_TOKEN.KEY);
        public static final UniqueKey<AuthTokenRecord> KEY_AUTH_TOKEN_KEY = createUniqueKey(AuthTokenTable.AUTH_TOKEN, "KEY_auth_token_key", AuthTokenTable.AUTH_TOKEN.KEY);
        public static final UniqueKey<CertificateRecord> KEY_CERTIFICATE_PRIMARY = createUniqueKey(CertificateTable.CERTIFICATE, "KEY_certificate_PRIMARY", CertificateTable.CERTIFICATE.ID);
        public static final UniqueKey<CertificateRecord> KEY_CERTIFICATE_IDX_CERT_DATA_UUID = createUniqueKey(CertificateTable.CERTIFICATE, "KEY_certificate_idx_cert_data_uuid", CertificateTable.CERTIFICATE.UUID);
        public static final UniqueKey<ClusterRecord> KEY_CLUSTER_PRIMARY = createUniqueKey(ClusterTable.CLUSTER, "KEY_cluster_PRIMARY", ClusterTable.CLUSTER.ID);
        public static final UniqueKey<ClusterRecord> KEY_CLUSTER_IDX_CLUSTER_UUID = createUniqueKey(ClusterTable.CLUSTER, "KEY_cluster_idx_cluster_uuid", ClusterTable.CLUSTER.UUID);
        public static final UniqueKey<CredentialRecord> KEY_CREDENTIAL_PRIMARY = createUniqueKey(CredentialTable.CREDENTIAL, "KEY_credential_PRIMARY", CredentialTable.CREDENTIAL.ID);
        public static final UniqueKey<CredentialRecord> KEY_CREDENTIAL_IDX_CREDENTIAL_UUID = createUniqueKey(CredentialTable.CREDENTIAL, "KEY_credential_idx_credential_uuid", CredentialTable.CREDENTIAL.UUID);
        public static final UniqueKey<DataRecord> KEY_DATA_PRIMARY = createUniqueKey(DataTable.DATA, "KEY_data_PRIMARY", DataTable.DATA.ID);
        public static final UniqueKey<DataRecord> KEY_DATA_IDX_DATA_NAME = createUniqueKey(DataTable.DATA, "KEY_data_idx_data_name", DataTable.DATA.NAME);
        public static final UniqueKey<DatabasechangeloglockRecord> KEY_DATABASECHANGELOGLOCK_PRIMARY = createUniqueKey(DatabasechangeloglockTable.DATABASECHANGELOGLOCK, "KEY_DATABASECHANGELOGLOCK_PRIMARY", DatabasechangeloglockTable.DATABASECHANGELOGLOCK.ID);
        public static final UniqueKey<DeploymentUnitRecord> KEY_DEPLOYMENT_UNIT_PRIMARY = createUniqueKey(DeploymentUnitTable.DEPLOYMENT_UNIT, "KEY_deployment_unit_PRIMARY", DeploymentUnitTable.DEPLOYMENT_UNIT.ID);
        public static final UniqueKey<DeploymentUnitRecord> KEY_DEPLOYMENT_UNIT_IDX_DEPLOYMENT_UNIT_UUID = createUniqueKey(DeploymentUnitTable.DEPLOYMENT_UNIT, "KEY_deployment_unit_idx_deployment_unit_uuid", DeploymentUnitTable.DEPLOYMENT_UNIT.UUID);
        public static final UniqueKey<DynamicSchemaRecord> KEY_DYNAMIC_SCHEMA_PRIMARY = createUniqueKey(DynamicSchemaTable.DYNAMIC_SCHEMA, "KEY_dynamic_schema_PRIMARY", DynamicSchemaTable.DYNAMIC_SCHEMA.ID);
        public static final UniqueKey<DynamicSchemaRecord> KEY_DYNAMIC_SCHEMA_IDX_DYNAMIC_SCHEMA_UUID = createUniqueKey(DynamicSchemaTable.DYNAMIC_SCHEMA, "KEY_dynamic_schema_idx_dynamic_schema_uuid", DynamicSchemaTable.DYNAMIC_SCHEMA.UUID);
        public static final UniqueKey<DynamicSchemaRoleRecord> KEY_DYNAMIC_SCHEMA_ROLE_PRIMARY = createUniqueKey(DynamicSchemaRoleTable.DYNAMIC_SCHEMA_ROLE, "KEY_dynamic_schema_role_PRIMARY", DynamicSchemaRoleTable.DYNAMIC_SCHEMA_ROLE.ID);
        public static final UniqueKey<ExternalEventRecord> KEY_EXTERNAL_EVENT_PRIMARY = createUniqueKey(ExternalEventTable.EXTERNAL_EVENT, "KEY_external_event_PRIMARY", ExternalEventTable.EXTERNAL_EVENT.ID);
        public static final UniqueKey<ExternalEventRecord> KEY_EXTERNAL_EVENT_IDX_EXTERNAL_EVENT_UUID = createUniqueKey(ExternalEventTable.EXTERNAL_EVENT, "KEY_external_event_idx_external_event_uuid", ExternalEventTable.EXTERNAL_EVENT.UUID);
        public static final UniqueKey<GenericObjectRecord> KEY_GENERIC_OBJECT_PRIMARY = createUniqueKey(GenericObjectTable.GENERIC_OBJECT, "KEY_generic_object_PRIMARY", GenericObjectTable.GENERIC_OBJECT.ID);
        public static final UniqueKey<GenericObjectRecord> KEY_GENERIC_OBJECT_IDX_GENERIC_OBJECT_UUID = createUniqueKey(GenericObjectTable.GENERIC_OBJECT, "KEY_generic_object_idx_generic_object_uuid", GenericObjectTable.GENERIC_OBJECT.UUID);
        public static final UniqueKey<HaMembershipRecord> KEY_HA_MEMBERSHIP_PRIMARY = createUniqueKey(HaMembershipTable.HA_MEMBERSHIP, "KEY_ha_membership_PRIMARY", HaMembershipTable.HA_MEMBERSHIP.ID);
        public static final UniqueKey<HaMembershipRecord> KEY_HA_MEMBERSHIP_IDX_CLUSTER_MEMBERSHIP_UUID = createUniqueKey(HaMembershipTable.HA_MEMBERSHIP, "KEY_ha_membership_idx_cluster_membership_uuid", HaMembershipTable.HA_MEMBERSHIP.UUID);
        public static final UniqueKey<HostRecord> KEY_HOST_PRIMARY = createUniqueKey(HostTable.HOST, "KEY_host_PRIMARY", HostTable.HOST.ID);
        public static final UniqueKey<HostRecord> KEY_HOST_IDX_HOST_UUID = createUniqueKey(HostTable.HOST, "KEY_host_idx_host_uuid", HostTable.HOST.UUID);
        public static final UniqueKey<HostTemplateRecord> KEY_HOST_TEMPLATE_PRIMARY = createUniqueKey(HostTemplateTable.HOST_TEMPLATE, "KEY_host_template_PRIMARY", HostTemplateTable.HOST_TEMPLATE.ID);
        public static final UniqueKey<HostTemplateRecord> KEY_HOST_TEMPLATE_IDX_HOST_TEMPLATE_UUID = createUniqueKey(HostTemplateTable.HOST_TEMPLATE, "KEY_host_template_idx_host_template_uuid", HostTemplateTable.HOST_TEMPLATE.UUID);
        public static final UniqueKey<InstanceRecord> KEY_INSTANCE_PRIMARY = createUniqueKey(InstanceTable.INSTANCE, "KEY_instance_PRIMARY", InstanceTable.INSTANCE.ID);
        public static final UniqueKey<InstanceRecord> KEY_INSTANCE_IDX_INSTANCE_UUID = createUniqueKey(InstanceTable.INSTANCE, "KEY_instance_idx_instance_uuid", InstanceTable.INSTANCE.UUID);
        public static final UniqueKey<KeyValueRecord> KEY_KEY_VALUE_UIX_KEY_VALUE_NAME = createUniqueKey(KeyValueTable.KEY_VALUE, "KEY_key_value_uix_key_value_name", KeyValueTable.KEY_VALUE.NAME);
        public static final UniqueKey<MachineDriverRecord> KEY_MACHINE_DRIVER_PRIMARY = createUniqueKey(MachineDriverTable.MACHINE_DRIVER, "KEY_machine_driver_PRIMARY", MachineDriverTable.MACHINE_DRIVER.ID);
        public static final UniqueKey<MachineDriverRecord> KEY_MACHINE_DRIVER_IDX_MACHINE_DRIVER_UUID = createUniqueKey(MachineDriverTable.MACHINE_DRIVER, "KEY_machine_driver_idx_machine_driver_uuid", MachineDriverTable.MACHINE_DRIVER.UUID);
        public static final UniqueKey<MountRecord> KEY_MOUNT_PRIMARY = createUniqueKey(MountTable.MOUNT, "KEY_mount_PRIMARY", MountTable.MOUNT.ID);
        public static final UniqueKey<MountRecord> KEY_MOUNT_IDX_MOUNT_UUID = createUniqueKey(MountTable.MOUNT, "KEY_mount_idx_mount_uuid", MountTable.MOUNT.UUID);
        public static final UniqueKey<NetworkRecord> KEY_NETWORK_PRIMARY = createUniqueKey(NetworkTable.NETWORK, "KEY_network_PRIMARY", NetworkTable.NETWORK.ID);
        public static final UniqueKey<NetworkRecord> KEY_NETWORK_IDX_NETWORK_UUID = createUniqueKey(NetworkTable.NETWORK, "KEY_network_idx_network_uuid", NetworkTable.NETWORK.UUID);
        public static final UniqueKey<NetworkDriverRecord> KEY_NETWORK_DRIVER_PRIMARY = createUniqueKey(NetworkDriverTable.NETWORK_DRIVER, "KEY_network_driver_PRIMARY", NetworkDriverTable.NETWORK_DRIVER.ID);
        public static final UniqueKey<NetworkDriverRecord> KEY_NETWORK_DRIVER_IDX_NETWORK_DRIVER_UUID = createUniqueKey(NetworkDriverTable.NETWORK_DRIVER, "KEY_network_driver_idx_network_driver_uuid", NetworkDriverTable.NETWORK_DRIVER.UUID);
        public static final UniqueKey<ProcessExecutionRecord> KEY_PROCESS_EXECUTION_PRIMARY = createUniqueKey(ProcessExecutionTable.PROCESS_EXECUTION, "KEY_process_execution_PRIMARY", ProcessExecutionTable.PROCESS_EXECUTION.ID);
        public static final UniqueKey<ProcessExecutionRecord> KEY_PROCESS_EXECUTION_IDX_PROCESS_EXECUTION__UUID = createUniqueKey(ProcessExecutionTable.PROCESS_EXECUTION, "KEY_process_execution_idx_process_execution__uuid", ProcessExecutionTable.PROCESS_EXECUTION.UUID);
        public static final UniqueKey<ProcessInstanceRecord> KEY_PROCESS_INSTANCE_PRIMARY = createUniqueKey(ProcessInstanceTable.PROCESS_INSTANCE, "KEY_process_instance_PRIMARY", ProcessInstanceTable.PROCESS_INSTANCE.ID);
        public static final UniqueKey<ProjectMemberRecord> KEY_PROJECT_MEMBER_PRIMARY = createUniqueKey(ProjectMemberTable.PROJECT_MEMBER, "KEY_project_member_PRIMARY", ProjectMemberTable.PROJECT_MEMBER.ID);
        public static final UniqueKey<ProjectMemberRecord> KEY_PROJECT_MEMBER_IDX_PROJECT_MEMBER_UUID = createUniqueKey(ProjectMemberTable.PROJECT_MEMBER, "KEY_project_member_idx_project_member_uuid", ProjectMemberTable.PROJECT_MEMBER.UUID);
        public static final UniqueKey<ResourcePoolRecord> KEY_RESOURCE_POOL_PRIMARY = createUniqueKey(ResourcePoolTable.RESOURCE_POOL, "KEY_resource_pool_PRIMARY", ResourcePoolTable.RESOURCE_POOL.ID);
        public static final UniqueKey<ResourcePoolRecord> KEY_RESOURCE_POOL_IDX_RESOURCE_POOL_UUID = createUniqueKey(ResourcePoolTable.RESOURCE_POOL, "KEY_resource_pool_idx_resource_pool_uuid", ResourcePoolTable.RESOURCE_POOL.UUID);
        public static final UniqueKey<ResourcePoolRecord> KEY_RESOURCE_POOL_IDX_POOL_ITEM2 = createUniqueKey(ResourcePoolTable.RESOURCE_POOL, "KEY_resource_pool_idx_pool_item2", ResourcePoolTable.RESOURCE_POOL.POOL_TYPE, ResourcePoolTable.RESOURCE_POOL.POOL_ID, ResourcePoolTable.RESOURCE_POOL.QUALIFIER, ResourcePoolTable.RESOURCE_POOL.ITEM);
        public static final UniqueKey<RevisionRecord> KEY_REVISION_PRIMARY = createUniqueKey(RevisionTable.REVISION, "KEY_revision_PRIMARY", RevisionTable.REVISION.ID);
        public static final UniqueKey<RevisionRecord> KEY_REVISION_IDX_REVISION_UUID = createUniqueKey(RevisionTable.REVISION, "KEY_revision_idx_revision_uuid", RevisionTable.REVISION.UUID);
        public static final UniqueKey<ScheduledUpgradeRecord> KEY_SCHEDULED_UPGRADE_PRIMARY = createUniqueKey(ScheduledUpgradeTable.SCHEDULED_UPGRADE, "KEY_scheduled_upgrade_PRIMARY", ScheduledUpgradeTable.SCHEDULED_UPGRADE.ID);
        public static final UniqueKey<ScheduledUpgradeRecord> KEY_SCHEDULED_UPGRADE_IDX_SCHEDULED_UPGRADE_UUID = createUniqueKey(ScheduledUpgradeTable.SCHEDULED_UPGRADE, "KEY_scheduled_upgrade_idx_scheduled_upgrade_uuid", ScheduledUpgradeTable.SCHEDULED_UPGRADE.UUID);
        public static final UniqueKey<SecretRecord> KEY_SECRET_PRIMARY = createUniqueKey(SecretTable.SECRET, "KEY_secret_PRIMARY", SecretTable.SECRET.ID);
        public static final UniqueKey<SecretRecord> KEY_SECRET_IDX_SECRET_UUID = createUniqueKey(SecretTable.SECRET, "KEY_secret_idx_secret_uuid", SecretTable.SECRET.UUID);
        public static final UniqueKey<ServiceRecord> KEY_SERVICE_PRIMARY = createUniqueKey(ServiceTable.SERVICE, "KEY_service_PRIMARY", ServiceTable.SERVICE.ID);
        public static final UniqueKey<ServiceRecord> KEY_SERVICE_IDX_SERVICE_UUID = createUniqueKey(ServiceTable.SERVICE, "KEY_service_idx_service_uuid", ServiceTable.SERVICE.UUID);
        public static final UniqueKey<ServiceEventRecord> KEY_SERVICE_EVENT_PRIMARY = createUniqueKey(ServiceEventTable.SERVICE_EVENT, "KEY_service_event_PRIMARY", ServiceEventTable.SERVICE_EVENT.ID);
        public static final UniqueKey<ServiceEventRecord> KEY_SERVICE_EVENT_IDX_SERVICE_EVENT_UUID = createUniqueKey(ServiceEventTable.SERVICE_EVENT, "KEY_service_event_idx_service_event_uuid", ServiceEventTable.SERVICE_EVENT.UUID);
        public static final UniqueKey<ServiceLogRecord> KEY_SERVICE_LOG_PRIMARY = createUniqueKey(ServiceLogTable.SERVICE_LOG, "KEY_service_log_PRIMARY", ServiceLogTable.SERVICE_LOG.ID);
        public static final UniqueKey<SettingRecord> KEY_SETTING_PRIMARY = createUniqueKey(SettingTable.SETTING, "KEY_setting_PRIMARY", SettingTable.SETTING.ID);
        public static final UniqueKey<StackRecord> KEY_STACK_PRIMARY = createUniqueKey(StackTable.STACK, "KEY_stack_PRIMARY", StackTable.STACK.ID);
        public static final UniqueKey<StackRecord> KEY_STACK_IDX_ENVIRONMENT_UUID = createUniqueKey(StackTable.STACK, "KEY_stack_idx_environment_uuid", StackTable.STACK.UUID);
        public static final UniqueKey<StorageDriverRecord> KEY_STORAGE_DRIVER_PRIMARY = createUniqueKey(StorageDriverTable.STORAGE_DRIVER, "KEY_storage_driver_PRIMARY", StorageDriverTable.STORAGE_DRIVER.ID);
        public static final UniqueKey<StorageDriverRecord> KEY_STORAGE_DRIVER_IDX_STORAGE_DRIVER_UUID = createUniqueKey(StorageDriverTable.STORAGE_DRIVER, "KEY_storage_driver_idx_storage_driver_uuid", StorageDriverTable.STORAGE_DRIVER.UUID);
        public static final UniqueKey<StoragePoolRecord> KEY_STORAGE_POOL_PRIMARY = createUniqueKey(StoragePoolTable.STORAGE_POOL, "KEY_storage_pool_PRIMARY", StoragePoolTable.STORAGE_POOL.ID);
        public static final UniqueKey<StoragePoolRecord> KEY_STORAGE_POOL_IDX_STORAGE_POOL_UUID = createUniqueKey(StoragePoolTable.STORAGE_POOL, "KEY_storage_pool_idx_storage_pool_uuid", StoragePoolTable.STORAGE_POOL.UUID);
        public static final UniqueKey<StoragePoolHostMapRecord> KEY_STORAGE_POOL_HOST_MAP_PRIMARY = createUniqueKey(StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP, "KEY_storage_pool_host_map_PRIMARY", StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP.ID);
        public static final UniqueKey<StoragePoolHostMapRecord> KEY_STORAGE_POOL_HOST_MAP_IDX_STORAGE_POOL_HOST_MAP_UUID = createUniqueKey(StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP, "KEY_storage_pool_host_map_idx_storage_pool_host_map_uuid", StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP.UUID);
        public static final UniqueKey<SubnetRecord> KEY_SUBNET_PRIMARY = createUniqueKey(SubnetTable.SUBNET, "KEY_subnet_PRIMARY", SubnetTable.SUBNET.ID);
        public static final UniqueKey<SubnetRecord> KEY_SUBNET_IDX_SUBNET_UUID = createUniqueKey(SubnetTable.SUBNET, "KEY_subnet_idx_subnet_uuid", SubnetTable.SUBNET.UUID);
        public static final UniqueKey<UserPreferenceRecord> KEY_USER_PREFERENCE_PRIMARY = createUniqueKey(UserPreferenceTable.USER_PREFERENCE, "KEY_user_preference_PRIMARY", UserPreferenceTable.USER_PREFERENCE.ID);
        public static final UniqueKey<UserPreferenceRecord> KEY_USER_PREFERENCE_IDX_USER_PREFERENCE_UUID = createUniqueKey(UserPreferenceTable.USER_PREFERENCE, "KEY_user_preference_idx_user_preference_uuid", UserPreferenceTable.USER_PREFERENCE.UUID);
        public static final UniqueKey<VolumeRecord> KEY_VOLUME_PRIMARY = createUniqueKey(VolumeTable.VOLUME, "KEY_volume_PRIMARY", VolumeTable.VOLUME.ID);
        public static final UniqueKey<VolumeRecord> KEY_VOLUME_IDX_VOLUME_UUID = createUniqueKey(VolumeTable.VOLUME, "KEY_volume_idx_volume_uuid", VolumeTable.VOLUME.UUID);
        public static final UniqueKey<VolumeStoragePoolMapRecord> KEY_VOLUME_STORAGE_POOL_MAP_PRIMARY = createUniqueKey(VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP, "KEY_volume_storage_pool_map_PRIMARY", VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP.ID);
        public static final UniqueKey<VolumeStoragePoolMapRecord> KEY_VOLUME_STORAGE_POOL_MAP_IDX_VOLUME_STORAGE_POOL_MAP_UUID = createUniqueKey(VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP, "KEY_volume_storage_pool_map_idx_volume_storage_pool_map_uuid", VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP.UUID);
        public static final UniqueKey<VolumeTemplateRecord> KEY_VOLUME_TEMPLATE_PRIMARY = createUniqueKey(VolumeTemplateTable.VOLUME_TEMPLATE, "KEY_volume_template_PRIMARY", VolumeTemplateTable.VOLUME_TEMPLATE.ID);
        public static final UniqueKey<VolumeTemplateRecord> KEY_VOLUME_TEMPLATE_IDX_VOLUME_TEMPLATE_UUID = createUniqueKey(VolumeTemplateTable.VOLUME_TEMPLATE, "KEY_volume_template_idx_volume_template_uuid", VolumeTemplateTable.VOLUME_TEMPLATE.UUID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<AccountRecord, ClusterRecord> FK_ACCOUNT__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, AccountTable.ACCOUNT, "fk_account__cluster_id", AccountTable.ACCOUNT.CLUSTER_ID);
        public static final ForeignKey<AgentRecord, AccountRecord> FK_AGENT__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, AgentTable.AGENT, "fk_agent__account_id", AgentTable.AGENT.ACCOUNT_ID);
        public static final ForeignKey<AgentRecord, AccountRecord> FK_AGENT__RESOURCE_ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, AgentTable.AGENT, "fk_agent__resource_account_id", AgentTable.AGENT.RESOURCE_ACCOUNT_ID);
        public static final ForeignKey<AgentRecord, ClusterRecord> FK_AGENT__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, AgentTable.AGENT, "fk_agent__cluster_id", AgentTable.AGENT.CLUSTER_ID);
        public static final ForeignKey<AuditLogRecord, AccountRecord> FK_AUDIT_LOG__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, AuditLogTable.AUDIT_LOG, "fk_audit_log__account_id", AuditLogTable.AUDIT_LOG.ACCOUNT_ID);
        public static final ForeignKey<AuditLogRecord, AccountRecord> FK_AUDIT_LOG__AUTHENTICATED_AS_ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, AuditLogTable.AUDIT_LOG, "fk_audit_log__authenticated_as_account_id", AuditLogTable.AUDIT_LOG.AUTHENTICATED_AS_ACCOUNT_ID);
        public static final ForeignKey<AuthTokenRecord, AccountRecord> FK_AUTH_TOKEN__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, AuthTokenTable.AUTH_TOKEN, "fk_auth_token__account_id", AuthTokenTable.AUTH_TOKEN.ACCOUNT_ID);
        public static final ForeignKey<AuthTokenRecord, AccountRecord> AUTH_TOKEN_IBFK_1 = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, AuthTokenTable.AUTH_TOKEN, "auth_token_ibfk_1", AuthTokenTable.AUTH_TOKEN.AUTHENTICATED_AS_ACCOUNT_ID);
        public static final ForeignKey<CertificateRecord, AccountRecord> FK_CERT_DATA__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, CertificateTable.CERTIFICATE, "fk_cert_data__account_id", CertificateTable.CERTIFICATE.ACCOUNT_ID);
        public static final ForeignKey<CertificateRecord, AccountRecord> FK_CERTIFICATE__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, CertificateTable.CERTIFICATE, "fk_certificate__creator_id", CertificateTable.CERTIFICATE.CREATOR_ID);
        public static final ForeignKey<ClusterRecord, AccountRecord> FK_CLUSTER__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ClusterTable.CLUSTER, "fk_cluster__creator_id", ClusterTable.CLUSTER.CREATOR_ID);
        public static final ForeignKey<ClusterRecord, NetworkRecord> FK_CLUSTER__NETWORK_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_NETWORK_PRIMARY, ClusterTable.CLUSTER, "fk_cluster__network_id", ClusterTable.CLUSTER.DEFAULT_NETWORK_ID);
        public static final ForeignKey<CredentialRecord, AccountRecord> FK_CREDENTIAL__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, CredentialTable.CREDENTIAL, "fk_credential__account_id", CredentialTable.CREDENTIAL.ACCOUNT_ID);
        public static final ForeignKey<CredentialRecord, StoragePoolRecord> FK_CREDENTIAL__REGISTRY_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STORAGE_POOL_PRIMARY, CredentialTable.CREDENTIAL, "fk_credential__registry_id", CredentialTable.CREDENTIAL.REGISTRY_ID);
        public static final ForeignKey<DeploymentUnitRecord, AccountRecord> FK_DEPLOYMENT_UNIT__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, DeploymentUnitTable.DEPLOYMENT_UNIT, "fk_deployment_unit__account_id", DeploymentUnitTable.DEPLOYMENT_UNIT.ACCOUNT_ID);
        public static final ForeignKey<DeploymentUnitRecord, ServiceRecord> FK_DEPLOYMENT_UNIT__SERVICE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_SERVICE_PRIMARY, DeploymentUnitTable.DEPLOYMENT_UNIT, "fk_deployment_unit__service_id", DeploymentUnitTable.DEPLOYMENT_UNIT.SERVICE_ID);
        public static final ForeignKey<DeploymentUnitRecord, StackRecord> FK_DEPLOYMENT_UNIT__ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, DeploymentUnitTable.DEPLOYMENT_UNIT, "fk_deployment_unit__environment_id", DeploymentUnitTable.DEPLOYMENT_UNIT.STACK_ID);
        public static final ForeignKey<DeploymentUnitRecord, HostRecord> FK_DEPLOYMENT_UNIT__HOST_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_HOST_PRIMARY, DeploymentUnitTable.DEPLOYMENT_UNIT, "fk_deployment_unit__host_id", DeploymentUnitTable.DEPLOYMENT_UNIT.HOST_ID);
        public static final ForeignKey<DeploymentUnitRecord, RevisionRecord> FK_DEPLOYMENT_UNIT_REQUESTED_REVISION_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_REVISION_PRIMARY, DeploymentUnitTable.DEPLOYMENT_UNIT, "fk_deployment_unit_requested_revision_id", DeploymentUnitTable.DEPLOYMENT_UNIT.REQUESTED_REVISION_ID);
        public static final ForeignKey<DeploymentUnitRecord, RevisionRecord> FK_DEPLOYMENT_UNIT__REVISION_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_REVISION_PRIMARY, DeploymentUnitTable.DEPLOYMENT_UNIT, "fk_deployment_unit__revision_id", DeploymentUnitTable.DEPLOYMENT_UNIT.REVISION_ID);
        public static final ForeignKey<DeploymentUnitRecord, ClusterRecord> FK_DEPLOYMENT_UNIT__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, DeploymentUnitTable.DEPLOYMENT_UNIT, "fk_deployment_unit__cluster_id", DeploymentUnitTable.DEPLOYMENT_UNIT.CLUSTER_ID);
        public static final ForeignKey<DynamicSchemaRecord, AccountRecord> FK_DYNAMIC_SCHEMA__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, DynamicSchemaTable.DYNAMIC_SCHEMA, "fk_dynamic_schema__account_id", DynamicSchemaTable.DYNAMIC_SCHEMA.ACCOUNT_ID);
        public static final ForeignKey<DynamicSchemaRecord, ServiceRecord> FK_DYNAMIC_SCHEMA__SERVICE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_SERVICE_PRIMARY, DynamicSchemaTable.DYNAMIC_SCHEMA, "fk_dynamic_schema__service_id", DynamicSchemaTable.DYNAMIC_SCHEMA.SERVICE_ID);
        public static final ForeignKey<DynamicSchemaRecord, AccountRecord> FK_DYNAMIC_SCHEMA__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, DynamicSchemaTable.DYNAMIC_SCHEMA, "fk_dynamic_schema__creator_id", DynamicSchemaTable.DYNAMIC_SCHEMA.CREATOR_ID);
        public static final ForeignKey<DynamicSchemaRoleRecord, DynamicSchemaRecord> FK_DYNAMIC_SCHEMA_ROLE_DYNAMIC_SCHEMA_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_DYNAMIC_SCHEMA_PRIMARY, DynamicSchemaRoleTable.DYNAMIC_SCHEMA_ROLE, "fk_dynamic_schema_role_dynamic_schema_id", DynamicSchemaRoleTable.DYNAMIC_SCHEMA_ROLE.DYNAMIC_SCHEMA_ID);
        public static final ForeignKey<ExternalEventRecord, AccountRecord> FK_EXTERNAL_EVENT__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ExternalEventTable.EXTERNAL_EVENT, "fk_external_event__account_id", ExternalEventTable.EXTERNAL_EVENT.ACCOUNT_ID);
        public static final ForeignKey<ExternalEventRecord, AccountRecord> FK_EXTERNAL_EVENT__REPORTED_ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ExternalEventTable.EXTERNAL_EVENT, "fk_external_event__reported_account_id", ExternalEventTable.EXTERNAL_EVENT.REPORTED_ACCOUNT_ID);
        public static final ForeignKey<ExternalEventRecord, AccountRecord> FK_EXTERNAL_EVENT__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ExternalEventTable.EXTERNAL_EVENT, "fk_external_event__creator_id", ExternalEventTable.EXTERNAL_EVENT.CREATOR_ID);
        public static final ForeignKey<ExternalEventRecord, ClusterRecord> FK_EXTERNAL_EVENT__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, ExternalEventTable.EXTERNAL_EVENT, "fk_external_event__cluster_id", ExternalEventTable.EXTERNAL_EVENT.CLUSTER_ID);
        public static final ForeignKey<GenericObjectRecord, AccountRecord> FK_GENERIC_OBJECT__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, GenericObjectTable.GENERIC_OBJECT, "fk_generic_object__account_id", GenericObjectTable.GENERIC_OBJECT.ACCOUNT_ID);
        public static final ForeignKey<GenericObjectRecord, AccountRecord> FK_GENERIC_OBJECT__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, GenericObjectTable.GENERIC_OBJECT, "fk_generic_object__creator_id", GenericObjectTable.GENERIC_OBJECT.CREATOR_ID);
        public static final ForeignKey<GenericObjectRecord, ClusterRecord> FK_GENERIC_OBJECT__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, GenericObjectTable.GENERIC_OBJECT, "fk_generic_object__cluster_id", GenericObjectTable.GENERIC_OBJECT.CLUSTER_ID);
        public static final ForeignKey<HostRecord, AgentRecord> FK_HOST__AGENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_AGENT_PRIMARY, HostTable.HOST, "fk_host__agent_id", HostTable.HOST.AGENT_ID);
        public static final ForeignKey<HostRecord, StackRecord> FK_HOST__ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, HostTable.HOST, "fk_host__environment_id", HostTable.HOST.STACK_ID);
        public static final ForeignKey<HostRecord, HostTemplateRecord> FK_HOST__HOST_TEMPLATE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_HOST_TEMPLATE_PRIMARY, HostTable.HOST, "fk_host__host_template_id", HostTable.HOST.HOST_TEMPLATE_ID);
        public static final ForeignKey<HostRecord, ClusterRecord> FK_HOST__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, HostTable.HOST, "fk_host__cluster_id", HostTable.HOST.CLUSTER_ID);
        public static final ForeignKey<HostRecord, AccountRecord> FK_HOST__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, HostTable.HOST, "fk_host__creator_id", HostTable.HOST.CREATOR_ID);
        public static final ForeignKey<HostTemplateRecord, ClusterRecord> FK_HOST_TEMPLATE__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, HostTemplateTable.HOST_TEMPLATE, "fk_host_template__cluster_id", HostTemplateTable.HOST_TEMPLATE.CLUSTER_ID);
        public static final ForeignKey<HostTemplateRecord, AccountRecord> FK_HOST_TEMPLATE__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, HostTemplateTable.HOST_TEMPLATE, "fk_host_template__creator_id", HostTemplateTable.HOST_TEMPLATE.CREATOR_ID);
        public static final ForeignKey<InstanceRecord, AccountRecord> FK_INSTANCE__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, InstanceTable.INSTANCE, "fk_instance__account_id", InstanceTable.INSTANCE.ACCOUNT_ID);
        public static final ForeignKey<InstanceRecord, AgentRecord> FK_INSTANCE__AGENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_AGENT_PRIMARY, InstanceTable.INSTANCE, "fk_instance__agent_id", InstanceTable.INSTANCE.AGENT_ID);
        public static final ForeignKey<InstanceRecord, CredentialRecord> FK_INSTANCE__REGISTRY_CREDENTIAL_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CREDENTIAL_PRIMARY, InstanceTable.INSTANCE, "fk_instance__registry_credential_id", InstanceTable.INSTANCE.REGISTRY_CREDENTIAL_ID);
        public static final ForeignKey<InstanceRecord, InstanceRecord> FK_INSTANCE__INSTANCE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_INSTANCE_PRIMARY, InstanceTable.INSTANCE, "fk_instance__instance_id", InstanceTable.INSTANCE.NETWORK_CONTAINER_ID);
        public static final ForeignKey<InstanceRecord, ServiceRecord> FK_INSTANCE__SERVICE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_SERVICE_PRIMARY, InstanceTable.INSTANCE, "fk_instance__service_id", InstanceTable.INSTANCE.SERVICE_ID);
        public static final ForeignKey<InstanceRecord, StackRecord> FK_INSTANCE__ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, InstanceTable.INSTANCE, "fk_instance__environment_id", InstanceTable.INSTANCE.STACK_ID);
        public static final ForeignKey<InstanceRecord, DeploymentUnitRecord> FK_INSTANCE__DEPLOYMENT_UNIT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_DEPLOYMENT_UNIT_PRIMARY, InstanceTable.INSTANCE, "fk_instance__deployment_unit_id", InstanceTable.INSTANCE.DEPLOYMENT_UNIT_ID);
        public static final ForeignKey<InstanceRecord, RevisionRecord> FK_INSTANCE__REVISION_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_REVISION_PRIMARY, InstanceTable.INSTANCE, "fk_instance__revision_id", InstanceTable.INSTANCE.REVISION_ID);
        public static final ForeignKey<InstanceRecord, HostRecord> FK_INSTANCE__HOST_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_HOST_PRIMARY, InstanceTable.INSTANCE, "fk_instance__host_id", InstanceTable.INSTANCE.HOST_ID);
        public static final ForeignKey<InstanceRecord, NetworkRecord> FK_INSTANCE__NETWORK_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_NETWORK_PRIMARY, InstanceTable.INSTANCE, "fk_instance__network_id", InstanceTable.INSTANCE.NETWORK_ID);
        public static final ForeignKey<InstanceRecord, ClusterRecord> FK_INSTANCE__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, InstanceTable.INSTANCE, "fk_instance__cluster_id", InstanceTable.INSTANCE.CLUSTER_ID);
        public static final ForeignKey<InstanceRecord, AccountRecord> FK_INSTANCE__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, InstanceTable.INSTANCE, "fk_instance__creator_id", InstanceTable.INSTANCE.CREATOR_ID);
        public static final ForeignKey<MachineDriverRecord, AccountRecord> FK_MACHINE_DRIVER__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, MachineDriverTable.MACHINE_DRIVER, "fk_machine_driver__creator_id", MachineDriverTable.MACHINE_DRIVER.CREATOR_ID);
        public static final ForeignKey<MountRecord, AccountRecord> FK_MOUNT__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, MountTable.MOUNT, "fk_mount__account_id", MountTable.MOUNT.ACCOUNT_ID);
        public static final ForeignKey<MountRecord, VolumeRecord> FK_MOUNT__VOLUME_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_VOLUME_PRIMARY, MountTable.MOUNT, "fk_mount__volume_id", MountTable.MOUNT.VOLUME_ID);
        public static final ForeignKey<MountRecord, InstanceRecord> FK_MOUNT__INSTANCE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_INSTANCE_PRIMARY, MountTable.MOUNT, "fk_mount__instance_id", MountTable.MOUNT.INSTANCE_ID);
        public static final ForeignKey<NetworkRecord, NetworkDriverRecord> FK_NETWORK__NETWORK_DRIVER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_NETWORK_DRIVER_PRIMARY, NetworkTable.NETWORK, "fk_network__network_driver_id", NetworkTable.NETWORK.NETWORK_DRIVER_ID);
        public static final ForeignKey<NetworkRecord, ClusterRecord> FK_NETWORK__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, NetworkTable.NETWORK, "fk_network__cluster_id", NetworkTable.NETWORK.CLUSTER_ID);
        public static final ForeignKey<NetworkDriverRecord, ServiceRecord> FK_NETWORK_DRIVER__SERVICE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_SERVICE_PRIMARY, NetworkDriverTable.NETWORK_DRIVER, "fk_network_driver__service_id", NetworkDriverTable.NETWORK_DRIVER.SERVICE_ID);
        public static final ForeignKey<NetworkDriverRecord, ClusterRecord> FK_NETWORK_DRIVER__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, NetworkDriverTable.NETWORK_DRIVER, "fk_network_driver__cluster_id", NetworkDriverTable.NETWORK_DRIVER.CLUSTER_ID);
        public static final ForeignKey<ProcessExecutionRecord, ProcessInstanceRecord> FK_PROCESS_EXECUTION_PROCESS_INSTANCE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_PROCESS_INSTANCE_PRIMARY, ProcessExecutionTable.PROCESS_EXECUTION, "fk_process_execution_process_instance_id", ProcessExecutionTable.PROCESS_EXECUTION.PROCESS_INSTANCE_ID);
        public static final ForeignKey<ProcessInstanceRecord, AccountRecord> FK_PROCESS_INSTANCE__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ProcessInstanceTable.PROCESS_INSTANCE, "fk_process_instance__account_id", ProcessInstanceTable.PROCESS_INSTANCE.ACCOUNT_ID);
        public static final ForeignKey<ProcessInstanceRecord, ClusterRecord> FK_PROCESS_INSTANCE__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, ProcessInstanceTable.PROCESS_INSTANCE, "fk_process_instance__cluster_id", ProcessInstanceTable.PROCESS_INSTANCE.CLUSTER_ID);
        public static final ForeignKey<ProjectMemberRecord, AccountRecord> FK_PROJECT_MEMBER__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ProjectMemberTable.PROJECT_MEMBER, "fk_project_member__account_id", ProjectMemberTable.PROJECT_MEMBER.ACCOUNT_ID);
        public static final ForeignKey<ProjectMemberRecord, AccountRecord> FK_PROJECT_MEMBER__PROJECT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ProjectMemberTable.PROJECT_MEMBER, "fk_project_member__project_id", ProjectMemberTable.PROJECT_MEMBER.PROJECT_ID);
        public static final ForeignKey<ResourcePoolRecord, AccountRecord> FK_RESOURCE_POOL__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ResourcePoolTable.RESOURCE_POOL, "fk_resource_pool__account_id", ResourcePoolTable.RESOURCE_POOL.ACCOUNT_ID);
        public static final ForeignKey<RevisionRecord, AccountRecord> FK_REVISION__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, RevisionTable.REVISION, "fk_revision__account_id", RevisionTable.REVISION.ACCOUNT_ID);
        public static final ForeignKey<RevisionRecord, ServiceRecord> FK_REVISION__SERVICE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_SERVICE_PRIMARY, RevisionTable.REVISION, "fk_revision__service_id", RevisionTable.REVISION.SERVICE_ID);
        public static final ForeignKey<RevisionRecord, AccountRecord> FK_REVISION__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, RevisionTable.REVISION, "fk_revision__creator_id", RevisionTable.REVISION.CREATOR_ID);
        public static final ForeignKey<ScheduledUpgradeRecord, AccountRecord> FK_SCHEDULED_UPGRADE__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ScheduledUpgradeTable.SCHEDULED_UPGRADE, "fk_scheduled_upgrade__account_id", ScheduledUpgradeTable.SCHEDULED_UPGRADE.ACCOUNT_ID);
        public static final ForeignKey<ScheduledUpgradeRecord, StackRecord> FK_SCHEDULED_UPGRADE__ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, ScheduledUpgradeTable.SCHEDULED_UPGRADE, "fk_scheduled_upgrade__environment_id", ScheduledUpgradeTable.SCHEDULED_UPGRADE.STACK_ID);
        public static final ForeignKey<SecretRecord, AccountRecord> FK_SECRET__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, SecretTable.SECRET, "fk_secret__account_id", SecretTable.SECRET.ACCOUNT_ID);
        public static final ForeignKey<SecretRecord, StackRecord> FK_SECRET__ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, SecretTable.SECRET, "fk_secret__environment_id", SecretTable.SECRET.STACK_ID);
        public static final ForeignKey<SecretRecord, AccountRecord> FK_SECRET__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, SecretTable.SECRET, "fk_secret__creator_id", SecretTable.SECRET.CREATOR_ID);
        public static final ForeignKey<ServiceRecord, AccountRecord> FK_SERVICE__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ServiceTable.SERVICE, "fk_service__account_id", ServiceTable.SERVICE.ACCOUNT_ID);
        public static final ForeignKey<ServiceRecord, StackRecord> FK_SERVICE__ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, ServiceTable.SERVICE, "fk_service__environment_id", ServiceTable.SERVICE.STACK_ID);
        public static final ForeignKey<ServiceRecord, RevisionRecord> FK_SERVICE__PREVIOUS_REVISION_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_REVISION_PRIMARY, ServiceTable.SERVICE, "fk_service__previous_revision_id", ServiceTable.SERVICE.PREVIOUS_REVISION_ID);
        public static final ForeignKey<ServiceRecord, RevisionRecord> FK_SERVICE__REVISION_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_REVISION_PRIMARY, ServiceTable.SERVICE, "fk_service__revision_id", ServiceTable.SERVICE.REVISION_ID);
        public static final ForeignKey<ServiceRecord, ClusterRecord> FK_SERVICE_CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, ServiceTable.SERVICE, "fk_service_cluster_id", ServiceTable.SERVICE.CLUSTER_ID);
        public static final ForeignKey<ServiceRecord, AccountRecord> FK_SERVICE__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ServiceTable.SERVICE, "fk_service__creator_id", ServiceTable.SERVICE.CREATOR_ID);
        public static final ForeignKey<ServiceEventRecord, AccountRecord> FK_SERVICE_EVENT__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ServiceEventTable.SERVICE_EVENT, "fk_service_event__account_id", ServiceEventTable.SERVICE_EVENT.ACCOUNT_ID);
        public static final ForeignKey<ServiceEventRecord, HostRecord> FK_SERVICE_EVENT__HOST_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_HOST_PRIMARY, ServiceEventTable.SERVICE_EVENT, "fk_service_event__host_id", ServiceEventTable.SERVICE_EVENT.HOST_ID);
        public static final ForeignKey<ServiceEventRecord, InstanceRecord> FK_SERVICE_EVENT__INSTANCE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_INSTANCE_PRIMARY, ServiceEventTable.SERVICE_EVENT, "fk_service_event__instance_id", ServiceEventTable.SERVICE_EVENT.INSTANCE_ID);
        public static final ForeignKey<ServiceEventRecord, AccountRecord> FK_SERVICE_EVENT__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ServiceEventTable.SERVICE_EVENT, "fk_service_event__creator_id", ServiceEventTable.SERVICE_EVENT.CREATOR_ID);
        public static final ForeignKey<ServiceLogRecord, AccountRecord> FK_SERVICE_LOG__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, ServiceLogTable.SERVICE_LOG, "fk_service_log__account_id", ServiceLogTable.SERVICE_LOG.ACCOUNT_ID);
        public static final ForeignKey<ServiceLogRecord, ServiceRecord> FK_SERVICE_LOG__SERVICE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_SERVICE_PRIMARY, ServiceLogTable.SERVICE_LOG, "fk_service_log__service_id", ServiceLogTable.SERVICE_LOG.SERVICE_ID);
        public static final ForeignKey<ServiceLogRecord, InstanceRecord> FK_SERVICE_LOG__INSTANCE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_INSTANCE_PRIMARY, ServiceLogTable.SERVICE_LOG, "fk_service_log__instance_id", ServiceLogTable.SERVICE_LOG.INSTANCE_ID);
        public static final ForeignKey<ServiceLogRecord, DeploymentUnitRecord> FK_SERVICE_LOG__DEPLOYMENT_UNIT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_DEPLOYMENT_UNIT_PRIMARY, ServiceLogTable.SERVICE_LOG, "fk_service_log__deployment_unit_id", ServiceLogTable.SERVICE_LOG.DEPLOYMENT_UNIT_ID);
        public static final ForeignKey<StackRecord, AccountRecord> FK_ENVIRONMENT__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, StackTable.STACK, "fk_environment__account_id", StackTable.STACK.ACCOUNT_ID);
        public static final ForeignKey<StackRecord, StackRecord> FK_ENVIRONMENT_ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, StackTable.STACK, "fk_environment_environment_id", StackTable.STACK.PARENT_ENVIRONMENT_ID);
        public static final ForeignKey<StackRecord, ClusterRecord> FK_STACK__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, StackTable.STACK, "fk_stack__cluster_id", StackTable.STACK.CLUSTER_ID);
        public static final ForeignKey<StackRecord, AccountRecord> FK_STACK__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, StackTable.STACK, "fk_stack__creator_id", StackTable.STACK.CREATOR_ID);
        public static final ForeignKey<StorageDriverRecord, ServiceRecord> FK_STORAGE_DRIVER__SERVICE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_SERVICE_PRIMARY, StorageDriverTable.STORAGE_DRIVER, "fk_storage_driver__service_id", StorageDriverTable.STORAGE_DRIVER.SERVICE_ID);
        public static final ForeignKey<StorageDriverRecord, ClusterRecord> FK_STORAGE_DRIVER__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, StorageDriverTable.STORAGE_DRIVER, "fk_storage_driver__cluster_id", StorageDriverTable.STORAGE_DRIVER.CLUSTER_ID);
        public static final ForeignKey<StoragePoolRecord, AgentRecord> FK_STORAGE_POOL__AGENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_AGENT_PRIMARY, StoragePoolTable.STORAGE_POOL, "fk_storage_pool__agent_id", StoragePoolTable.STORAGE_POOL.AGENT_ID);
        public static final ForeignKey<StoragePoolRecord, StorageDriverRecord> FK_STORAGE_DRIVER__ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STORAGE_DRIVER_PRIMARY, StoragePoolTable.STORAGE_POOL, "fk_storage_driver__id", StoragePoolTable.STORAGE_POOL.STORAGE_DRIVER_ID);
        public static final ForeignKey<StoragePoolRecord, ClusterRecord> FK_STORAGE_POOL__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, StoragePoolTable.STORAGE_POOL, "fk_storage_pool__cluster_id", StoragePoolTable.STORAGE_POOL.CLUSTER_ID);
        public static final ForeignKey<StoragePoolHostMapRecord, StoragePoolRecord> FK_STORAGE_POOL_HOST_MAP__STORAGE_POOL_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STORAGE_POOL_PRIMARY, StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP, "fk_storage_pool_host_map__storage_pool_id", StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP.STORAGE_POOL_ID);
        public static final ForeignKey<StoragePoolHostMapRecord, HostRecord> FK_STORAGE_POOL_HOST_MAP__HOST_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_HOST_PRIMARY, StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP, "fk_storage_pool_host_map__host_id", StoragePoolHostMapTable.STORAGE_POOL_HOST_MAP.HOST_ID);
        public static final ForeignKey<SubnetRecord, NetworkRecord> FK_SUBNET__NETWORK_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_NETWORK_PRIMARY, SubnetTable.SUBNET, "fk_subnet__network_id", SubnetTable.SUBNET.NETWORK_ID);
        public static final ForeignKey<SubnetRecord, ClusterRecord> FK_SUBNET__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, SubnetTable.SUBNET, "fk_subnet__cluster_id", SubnetTable.SUBNET.CLUSTER_ID);
        public static final ForeignKey<UserPreferenceRecord, AccountRecord> FK_USER_PREFERENCE__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, UserPreferenceTable.USER_PREFERENCE, "fk_user_preference__account_id", UserPreferenceTable.USER_PREFERENCE.ACCOUNT_ID);
        public static final ForeignKey<VolumeRecord, AccountRecord> FK_VOLUME__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, VolumeTable.VOLUME, "fk_volume__account_id", VolumeTable.VOLUME.ACCOUNT_ID);
        public static final ForeignKey<VolumeRecord, HostRecord> FK_VOLUME__HOST_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_HOST_PRIMARY, VolumeTable.VOLUME, "fk_volume__host_id", VolumeTable.VOLUME.HOST_ID);
        public static final ForeignKey<VolumeRecord, DeploymentUnitRecord> FK_VOLUME__DEPLOYMENT_UNIT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_DEPLOYMENT_UNIT_PRIMARY, VolumeTable.VOLUME, "fk_volume__deployment_unit_id", VolumeTable.VOLUME.DEPLOYMENT_UNIT_ID);
        public static final ForeignKey<VolumeRecord, StackRecord> FK_VOLUME__ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, VolumeTable.VOLUME, "fk_volume__environment_id", VolumeTable.VOLUME.STACK_ID);
        public static final ForeignKey<VolumeRecord, VolumeTemplateRecord> FK_VOLUME__VOLUME_TEMPLATE_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_VOLUME_TEMPLATE_PRIMARY, VolumeTable.VOLUME, "fk_volume__volume_template_id", VolumeTable.VOLUME.VOLUME_TEMPLATE_ID);
        public static final ForeignKey<VolumeRecord, StorageDriverRecord> FK_VOLUME__STORAGE_DRIVER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STORAGE_DRIVER_PRIMARY, VolumeTable.VOLUME, "fk_volume__storage_driver_id", VolumeTable.VOLUME.STORAGE_DRIVER_ID);
        public static final ForeignKey<VolumeRecord, StoragePoolRecord> FK_VOLUME__STORAGE_POOL_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STORAGE_POOL_PRIMARY, VolumeTable.VOLUME, "fk_volume__storage_pool_id", VolumeTable.VOLUME.STORAGE_POOL_ID);
        public static final ForeignKey<VolumeRecord, ClusterRecord> FK_VOLUME__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, VolumeTable.VOLUME, "fk_volume__cluster_id", VolumeTable.VOLUME.CLUSTER_ID);
        public static final ForeignKey<VolumeRecord, AccountRecord> FK_VOLUME__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, VolumeTable.VOLUME, "fk_volume__creator_id", VolumeTable.VOLUME.CREATOR_ID);
        public static final ForeignKey<VolumeStoragePoolMapRecord, VolumeRecord> FK_VOLUME_STORAGE_POOL_MAP__VOLUME_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_VOLUME_PRIMARY, VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP, "fk_volume_storage_pool_map__volume_id", VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP.VOLUME_ID);
        public static final ForeignKey<VolumeStoragePoolMapRecord, StoragePoolRecord> FK_VOLUME_STORAGE_POOL_MAP__STORAGE_POOL_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STORAGE_POOL_PRIMARY, VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP, "fk_volume_storage_pool_map__storage_pool_id", VolumeStoragePoolMapTable.VOLUME_STORAGE_POOL_MAP.STORAGE_POOL_ID);
        public static final ForeignKey<VolumeTemplateRecord, AccountRecord> FK_VOLUME_TEMPLATE__ACCOUNT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, VolumeTemplateTable.VOLUME_TEMPLATE, "fk_volume_template__account_id", VolumeTemplateTable.VOLUME_TEMPLATE.ACCOUNT_ID);
        public static final ForeignKey<VolumeTemplateRecord, StackRecord> FK_VOLUME_TEMPLATE__ENVIRONMENT_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_STACK_PRIMARY, VolumeTemplateTable.VOLUME_TEMPLATE, "fk_volume_template__environment_id", VolumeTemplateTable.VOLUME_TEMPLATE.STACK_ID);
        public static final ForeignKey<VolumeTemplateRecord, ClusterRecord> FK_VOLUME_TEMPLATE__CLUSTER_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_CLUSTER_PRIMARY, VolumeTemplateTable.VOLUME_TEMPLATE, "fk_volume_template__cluster_id", VolumeTemplateTable.VOLUME_TEMPLATE.CLUSTER_ID);
        public static final ForeignKey<VolumeTemplateRecord, AccountRecord> FK_VOLUME_TEMPLATE__CREATOR_ID = createForeignKey(io.cattle.platform.core.model.Keys.KEY_ACCOUNT_PRIMARY, VolumeTemplateTable.VOLUME_TEMPLATE, "fk_volume_template__creator_id", VolumeTemplateTable.VOLUME_TEMPLATE.CREATOR_ID);
    }
}
