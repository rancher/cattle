/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.ProjectMemberRecord;
import io.cattle.platform.db.jooq.converter.DataConverter;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectMemberTable extends TableImpl<ProjectMemberRecord> {

    private static final long serialVersionUID = 160000291;

    /**
     * The reference instance of <code>cattle.project_member</code>
     */
    public static final ProjectMemberTable PROJECT_MEMBER = new ProjectMemberTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectMemberRecord> getRecordType() {
        return ProjectMemberRecord.class;
    }

    /**
     * The column <code>cattle.project_member.id</code>.
     */
    public final TableField<ProjectMemberRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.project_member.name</code>.
     */
    public final TableField<ProjectMemberRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.project_member.account_id</code>.
     */
    public final TableField<ProjectMemberRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.project_member.kind</code>.
     */
    public final TableField<ProjectMemberRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.project_member.uuid</code>.
     */
    public final TableField<ProjectMemberRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.project_member.description</code>.
     */
    public final TableField<ProjectMemberRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>cattle.project_member.state</code>.
     */
    public final TableField<ProjectMemberRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.project_member.created</code>.
     */
    public final TableField<ProjectMemberRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.project_member.removed</code>.
     */
    public final TableField<ProjectMemberRecord, Date> REMOVED = createField("removed", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.project_member.remove_time</code>.
     */
    public final TableField<ProjectMemberRecord, Date> REMOVE_TIME = createField("remove_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.project_member.data</code>.
     */
    public final TableField<ProjectMemberRecord, Map<String,Object>> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "", new DataConverter());

    /**
     * The column <code>cattle.project_member.external_id</code>.
     */
    public final TableField<ProjectMemberRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.project_member.project_id</code>.
     */
    public final TableField<ProjectMemberRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.project_member.external_id_type</code>.
     */
    public final TableField<ProjectMemberRecord, String> EXTERNAL_ID_TYPE = createField("external_id_type", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.project_member.role</code>.
     */
    public final TableField<ProjectMemberRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>cattle.project_member</code> table reference
     */
    public ProjectMemberTable() {
        this("project_member", null);
    }

    /**
     * Create an aliased <code>cattle.project_member</code> table reference
     */
    public ProjectMemberTable(String alias) {
        this(alias, PROJECT_MEMBER);
    }

    private ProjectMemberTable(String alias, Table<ProjectMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectMemberTable(String alias, Table<ProjectMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectMemberRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROJECT_MEMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectMemberRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_MEMBER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectMemberRecord>>asList(Keys.KEY_PROJECT_MEMBER_PRIMARY, Keys.KEY_PROJECT_MEMBER_IDX_PROJECT_MEMBER_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectMemberRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectMemberRecord, ?>>asList(Keys.FK_PROJECT_MEMBER__ACCOUNT_ID, Keys.FK_PROJECT_MEMBER__PROJECT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectMemberTable as(String alias) {
        return new ProjectMemberTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMemberTable rename(String name) {
        return new ProjectMemberTable(name, null);
    }
}
