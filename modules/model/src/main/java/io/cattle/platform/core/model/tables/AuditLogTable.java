/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.AuditLogRecord;
import io.cattle.platform.db.jooq.converter.DataConverter;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditLogTable extends TableImpl<AuditLogRecord> {

    private static final long serialVersionUID = 613178112;

    /**
     * The reference instance of <code>cattle.audit_log</code>
     */
    public static final AuditLogTable AUDIT_LOG = new AuditLogTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuditLogRecord> getRecordType() {
        return AuditLogRecord.class;
    }

    /**
     * The column <code>cattle.audit_log.id</code>.
     */
    public final TableField<AuditLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.audit_log.account_id</code>.
     */
    public final TableField<AuditLogRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.audit_log.authenticated_as_account_id</code>.
     */
    public final TableField<AuditLogRecord, Long> AUTHENTICATED_AS_ACCOUNT_ID = createField("authenticated_as_account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.audit_log.kind</code>.
     */
    public final TableField<AuditLogRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.audit_log.auth_type</code>.
     */
    public final TableField<AuditLogRecord, String> AUTH_TYPE = createField("auth_type", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.audit_log.event_type</code>.
     */
    public final TableField<AuditLogRecord, String> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.audit_log.resource_type</code>.
     */
    public final TableField<AuditLogRecord, String> RESOURCE_TYPE = createField("resource_type", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.audit_log.resource_id</code>.
     */
    public final TableField<AuditLogRecord, Long> RESOURCE_ID = createField("resource_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.audit_log.description</code>.
     */
    public final TableField<AuditLogRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>cattle.audit_log.created</code>.
     */
    public final TableField<AuditLogRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.audit_log.data</code>.
     */
    public final TableField<AuditLogRecord, Map<String,Object>> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "", new DataConverter());

    /**
     * The column <code>cattle.audit_log.authenticated_as_identity_id</code>.
     */
    public final TableField<AuditLogRecord, String> AUTHENTICATED_AS_IDENTITY_ID = createField("authenticated_as_identity_id", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.audit_log.runtime</code>.
     */
    public final TableField<AuditLogRecord, Long> RUNTIME = createField("runtime", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.audit_log.client_ip</code>.
     */
    public final TableField<AuditLogRecord, String> CLIENT_IP = createField("client_ip", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>cattle.audit_log</code> table reference
     */
    public AuditLogTable() {
        this("audit_log", null);
    }

    /**
     * Create an aliased <code>cattle.audit_log</code> table reference
     */
    public AuditLogTable(String alias) {
        this(alias, AUDIT_LOG);
    }

    private AuditLogTable(String alias, Table<AuditLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuditLogTable(String alias, Table<AuditLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AuditLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_AUDIT_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuditLogRecord> getPrimaryKey() {
        return Keys.KEY_AUDIT_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuditLogRecord>> getKeys() {
        return Arrays.<UniqueKey<AuditLogRecord>>asList(Keys.KEY_AUDIT_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuditLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuditLogRecord, ?>>asList(Keys.FK_AUDIT_LOG__ACCOUNT_ID, Keys.FK_AUDIT_LOG__AUTHENTICATED_AS_ACCOUNT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuditLogTable as(String alias) {
        return new AuditLogTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuditLogTable rename(String name) {
        return new AuditLogTable(name, null);
    }
}
