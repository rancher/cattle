/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.HostRecord;
import io.cattle.platform.db.jooq.converter.DataConverter;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HostTable extends TableImpl<HostRecord> {

    private static final long serialVersionUID = 272860317;

    /**
     * The reference instance of <code>cattle.host</code>
     */
    public static final HostTable HOST = new HostTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HostRecord> getRecordType() {
        return HostRecord.class;
    }

    /**
     * The column <code>cattle.host.id</code>.
     */
    public final TableField<HostRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.host.name</code>.
     */
    public final TableField<HostRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.host.kind</code>.
     */
    public final TableField<HostRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.host.uuid</code>.
     */
    public final TableField<HostRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.host.description</code>.
     */
    public final TableField<HostRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>cattle.host.state</code>.
     */
    public final TableField<HostRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.host.created</code>.
     */
    public final TableField<HostRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.host.removed</code>.
     */
    public final TableField<HostRecord, Date> REMOVED = createField("removed", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.host.remove_time</code>.
     */
    public final TableField<HostRecord, Date> REMOVE_TIME = createField("remove_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.host.data</code>.
     */
    public final TableField<HostRecord, Map<String,Object>> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "", new DataConverter());

    /**
     * The column <code>cattle.host.uri</code>.
     */
    public final TableField<HostRecord, String> URI = createField("uri", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.host.agent_id</code>.
     */
    public final TableField<HostRecord, Long> AGENT_ID = createField("agent_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.host.agent_state</code>.
     */
    public final TableField<HostRecord, String> AGENT_STATE = createField("agent_state", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>cattle.host.local_storage_mb</code>.
     */
    public final TableField<HostRecord, Long> LOCAL_STORAGE_MB = createField("local_storage_mb", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.host.memory</code>.
     */
    public final TableField<HostRecord, Long> MEMORY = createField("memory", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.host.milli_cpu</code>.
     */
    public final TableField<HostRecord, Long> MILLI_CPU = createField("milli_cpu", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.host.environment_id</code>.
     */
    public final TableField<HostRecord, Long> STACK_ID = createField("environment_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.host.remove_after</code>.
     */
    public final TableField<HostRecord, Date> REMOVE_AFTER = createField("remove_after", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.host.host_template_id</code>.
     */
    public final TableField<HostRecord, Long> HOST_TEMPLATE_ID = createField("host_template_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.host.external_id</code>.
     */
    public final TableField<HostRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>cattle.host.revision</code>.
     */
    public final TableField<HostRecord, Long> REVISION = createField("revision", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>cattle.host.cluster_id</code>.
     */
    public final TableField<HostRecord, Long> CLUSTER_ID = createField("cluster_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.host.creator_id</code>.
     */
    public final TableField<HostRecord, Long> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>cattle.host</code> table reference
     */
    public HostTable() {
        this("host", null);
    }

    /**
     * Create an aliased <code>cattle.host</code> table reference
     */
    public HostTable(String alias) {
        this(alias, HOST);
    }

    private HostTable(String alias, Table<HostRecord> aliased) {
        this(alias, aliased, null);
    }

    private HostTable(String alias, Table<HostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HostRecord, Long> getIdentity() {
        return Keys.IDENTITY_HOST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HostRecord> getPrimaryKey() {
        return Keys.KEY_HOST_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HostRecord>> getKeys() {
        return Arrays.<UniqueKey<HostRecord>>asList(Keys.KEY_HOST_PRIMARY, Keys.KEY_HOST_IDX_HOST_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<HostRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HostRecord, ?>>asList(Keys.FK_HOST__AGENT_ID, Keys.FK_HOST__ENVIRONMENT_ID, Keys.FK_HOST__HOST_TEMPLATE_ID, Keys.FK_HOST__CLUSTER_ID, Keys.FK_HOST__CREATOR_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<HostRecord, Long> getRecordVersion() {
        return REVISION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HostTable as(String alias) {
        return new HostTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HostTable rename(String name) {
        return new HostTable(name, null);
    }
}
