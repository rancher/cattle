/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.ServiceRecord;
import io.cattle.platform.db.jooq.converter.DataConverter;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceTable extends TableImpl<ServiceRecord> {

    private static final long serialVersionUID = 725257226;

    /**
     * The reference instance of <code>cattle.service</code>
     */
    public static final ServiceTable SERVICE = new ServiceTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceRecord> getRecordType() {
        return ServiceRecord.class;
    }

    /**
     * The column <code>cattle.service.id</code>.
     */
    public final TableField<ServiceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.service.name</code>.
     */
    public final TableField<ServiceRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.service.account_id</code>.
     */
    public final TableField<ServiceRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.service.kind</code>.
     */
    public final TableField<ServiceRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.service.uuid</code>.
     */
    public final TableField<ServiceRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.service.description</code>.
     */
    public final TableField<ServiceRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>cattle.service.state</code>.
     */
    public final TableField<ServiceRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.service.created</code>.
     */
    public final TableField<ServiceRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.service.removed</code>.
     */
    public final TableField<ServiceRecord, Date> REMOVED = createField("removed", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.service.remove_time</code>.
     */
    public final TableField<ServiceRecord, Date> REMOVE_TIME = createField("remove_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.service.data</code>.
     */
    public final TableField<ServiceRecord, Map<String,Object>> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "", new DataConverter());

    /**
     * The column <code>cattle.service.environment_id</code>.
     */
    public final TableField<ServiceRecord, Long> STACK_ID = createField("environment_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.service.vip</code>.
     */
    public final TableField<ServiceRecord, String> VIP = createField("vip", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.service.create_index</code>.
     */
    public final TableField<ServiceRecord, Long> CREATE_INDEX = createField("create_index", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.service.selector</code>.
     */
    public final TableField<ServiceRecord, String> SELECTOR = createField("selector", org.jooq.impl.SQLDataType.VARCHAR.length(4096), this, "");

    /**
     * The column <code>cattle.service.external_id</code>.
     */
    public final TableField<ServiceRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.service.health_state</code>.
     */
    public final TableField<ServiceRecord, String> HEALTH_STATE = createField("health_state", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>cattle.service.previous_revision_id</code>.
     */
    public final TableField<ServiceRecord, Long> PREVIOUS_REVISION_ID = createField("previous_revision_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.service.revision_id</code>.
     */
    public final TableField<ServiceRecord, Long> REVISION_ID = createField("revision_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.service.revision</code>.
     */
    public final TableField<ServiceRecord, Long> REVISION = createField("revision", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>cattle.service.cluster_id</code>.
     */
    public final TableField<ServiceRecord, Long> CLUSTER_ID = createField("cluster_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.service.creator_id</code>.
     */
    public final TableField<ServiceRecord, Long> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>cattle.service</code> table reference
     */
    public ServiceTable() {
        this("service", null);
    }

    /**
     * Create an aliased <code>cattle.service</code> table reference
     */
    public ServiceTable(String alias) {
        this(alias, SERVICE);
    }

    private ServiceTable(String alias, Table<ServiceRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceTable(String alias, Table<ServiceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ServiceRecord, Long> getIdentity() {
        return Keys.IDENTITY_SERVICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServiceRecord> getPrimaryKey() {
        return Keys.KEY_SERVICE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServiceRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceRecord>>asList(Keys.KEY_SERVICE_PRIMARY, Keys.KEY_SERVICE_IDX_SERVICE_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ServiceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ServiceRecord, ?>>asList(Keys.FK_SERVICE__ACCOUNT_ID, Keys.FK_SERVICE__ENVIRONMENT_ID, Keys.FK_SERVICE__PREVIOUS_REVISION_ID, Keys.FK_SERVICE__REVISION_ID, Keys.FK_SERVICE_CLUSTER_ID, Keys.FK_SERVICE__CREATOR_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<ServiceRecord, Long> getRecordVersion() {
        return REVISION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceTable as(String alias) {
        return new ServiceTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceTable rename(String name) {
        return new ServiceTable(name, null);
    }
}
