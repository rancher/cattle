/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.StoragePoolRecord;
import io.cattle.platform.db.jooq.converter.DataConverter;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoragePoolTable extends TableImpl<StoragePoolRecord> {

    private static final long serialVersionUID = 70223977;

    /**
     * The reference instance of <code>cattle.storage_pool</code>
     */
    public static final StoragePoolTable STORAGE_POOL = new StoragePoolTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoragePoolRecord> getRecordType() {
        return StoragePoolRecord.class;
    }

    /**
     * The column <code>cattle.storage_pool.id</code>.
     */
    public final TableField<StoragePoolRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.storage_pool.name</code>.
     */
    public final TableField<StoragePoolRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.storage_pool.kind</code>.
     */
    public final TableField<StoragePoolRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.storage_pool.uuid</code>.
     */
    public final TableField<StoragePoolRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.storage_pool.description</code>.
     */
    public final TableField<StoragePoolRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>cattle.storage_pool.state</code>.
     */
    public final TableField<StoragePoolRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.storage_pool.created</code>.
     */
    public final TableField<StoragePoolRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.storage_pool.removed</code>.
     */
    public final TableField<StoragePoolRecord, Date> REMOVED = createField("removed", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.storage_pool.remove_time</code>.
     */
    public final TableField<StoragePoolRecord, Date> REMOVE_TIME = createField("remove_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.storage_pool.data</code>.
     */
    public final TableField<StoragePoolRecord, Map<String,Object>> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "", new DataConverter());

    /**
     * The column <code>cattle.storage_pool.physical_total_size_mb</code>.
     */
    public final TableField<StoragePoolRecord, Long> PHYSICAL_TOTAL_SIZE_MB = createField("physical_total_size_mb", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.storage_pool.virtual_total_size_mb</code>.
     */
    public final TableField<StoragePoolRecord, Long> VIRTUAL_TOTAL_SIZE_MB = createField("virtual_total_size_mb", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.storage_pool.external</code>.
     */
    public final TableField<StoragePoolRecord, Boolean> EXTERNAL = createField("external", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>cattle.storage_pool.agent_id</code>.
     */
    public final TableField<StoragePoolRecord, Long> AGENT_ID = createField("agent_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.storage_pool.zone_id</code>.
     */
    public final TableField<StoragePoolRecord, Long> ZONE_ID = createField("zone_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.storage_pool.external_id</code>.
     */
    public final TableField<StoragePoolRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>cattle.storage_pool.driver_name</code>.
     */
    public final TableField<StoragePoolRecord, String> DRIVER_NAME = createField("driver_name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.storage_pool.volume_access_mode</code>.
     */
    public final TableField<StoragePoolRecord, String> VOLUME_ACCESS_MODE = createField("volume_access_mode", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.storage_pool.storage_driver_id</code>.
     */
    public final TableField<StoragePoolRecord, Long> STORAGE_DRIVER_ID = createField("storage_driver_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.storage_pool.cluster_id</code>.
     */
    public final TableField<StoragePoolRecord, Long> CLUSTER_ID = createField("cluster_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>cattle.storage_pool</code> table reference
     */
    public StoragePoolTable() {
        this("storage_pool", null);
    }

    /**
     * Create an aliased <code>cattle.storage_pool</code> table reference
     */
    public StoragePoolTable(String alias) {
        this(alias, STORAGE_POOL);
    }

    private StoragePoolTable(String alias, Table<StoragePoolRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoragePoolTable(String alias, Table<StoragePoolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StoragePoolRecord, Long> getIdentity() {
        return Keys.IDENTITY_STORAGE_POOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StoragePoolRecord> getPrimaryKey() {
        return Keys.KEY_STORAGE_POOL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StoragePoolRecord>> getKeys() {
        return Arrays.<UniqueKey<StoragePoolRecord>>asList(Keys.KEY_STORAGE_POOL_PRIMARY, Keys.KEY_STORAGE_POOL_IDX_STORAGE_POOL_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StoragePoolRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StoragePoolRecord, ?>>asList(Keys.FK_STORAGE_POOL__AGENT_ID, Keys.FK_STORAGE_DRIVER__ID, Keys.FK_STORAGE_POOL__CLUSTER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StoragePoolTable as(String alias) {
        return new StoragePoolTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoragePoolTable rename(String name) {
        return new StoragePoolTable(name, null);
    }
}
