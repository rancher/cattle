/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.DataRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataTable extends TableImpl<DataRecord> {

    private static final long serialVersionUID = 1109547611;

    /**
     * The reference instance of <code>cattle.data</code>
     */
    public static final DataTable DATA = new DataTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataRecord> getRecordType() {
        return DataRecord.class;
    }

    /**
     * The column <code>cattle.data.id</code>.
     */
    public final TableField<DataRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.data.name</code>.
     */
    public final TableField<DataRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.data.visible</code>.
     */
    public final TableField<DataRecord, Boolean> VISIBLE = createField("visible", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>cattle.data.value</code>.
     */
    public final TableField<DataRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>cattle.data</code> table reference
     */
    public DataTable() {
        this("data", null);
    }

    /**
     * Create an aliased <code>cattle.data</code> table reference
     */
    public DataTable(String alias) {
        this(alias, DATA);
    }

    private DataTable(String alias, Table<DataRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataTable(String alias, Table<DataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DataRecord, Long> getIdentity() {
        return Keys.IDENTITY_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DataRecord> getPrimaryKey() {
        return Keys.KEY_DATA_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DataRecord>> getKeys() {
        return Arrays.<UniqueKey<DataRecord>>asList(Keys.KEY_DATA_PRIMARY, Keys.KEY_DATA_IDX_DATA_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataTable as(String alias) {
        return new DataTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataTable rename(String name) {
        return new DataTable(name, null);
    }
}
